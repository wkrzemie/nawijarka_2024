
Nawijarka_2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034a0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003634  08003634  00004634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800364c  0800364c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  0800364c  0800364c  0000464c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003654  08003654  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003654  08003654  00004654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003658  08003658  00004658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800365c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000000c  08003668  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08003668  000050f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d8fd  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002054  00000000  00000000  00012939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  00014990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000099c  00000000  00000000  000155e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016842  00000000  00000000  00015f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000edb3  00000000  00000000  0002c7c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d752  00000000  00000000  0003b579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8ccb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000331c  00000000  00000000  000c8d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000cc02c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800361c 	.word	0x0800361c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800361c 	.word	0x0800361c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08a      	sub	sp, #40	@ 0x28
 80004c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 0314 	add.w	r3, r7, #20
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004da:	2300      	movs	r3, #0
 80004dc:	613b      	str	r3, [r7, #16]
 80004de:	4b3b      	ldr	r3, [pc, #236]	@ (80005cc <MX_GPIO_Init+0x108>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e2:	4a3a      	ldr	r2, [pc, #232]	@ (80005cc <MX_GPIO_Init+0x108>)
 80004e4:	f043 0304 	orr.w	r3, r3, #4
 80004e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80004ea:	4b38      	ldr	r3, [pc, #224]	@ (80005cc <MX_GPIO_Init+0x108>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ee:	f003 0304 	and.w	r3, r3, #4
 80004f2:	613b      	str	r3, [r7, #16]
 80004f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	4b34      	ldr	r3, [pc, #208]	@ (80005cc <MX_GPIO_Init+0x108>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fe:	4a33      	ldr	r2, [pc, #204]	@ (80005cc <MX_GPIO_Init+0x108>)
 8000500:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000504:	6313      	str	r3, [r2, #48]	@ 0x30
 8000506:	4b31      	ldr	r3, [pc, #196]	@ (80005cc <MX_GPIO_Init+0x108>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	2300      	movs	r3, #0
 8000514:	60bb      	str	r3, [r7, #8]
 8000516:	4b2d      	ldr	r3, [pc, #180]	@ (80005cc <MX_GPIO_Init+0x108>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051a:	4a2c      	ldr	r2, [pc, #176]	@ (80005cc <MX_GPIO_Init+0x108>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6313      	str	r3, [r2, #48]	@ 0x30
 8000522:	4b2a      	ldr	r3, [pc, #168]	@ (80005cc <MX_GPIO_Init+0x108>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	4b26      	ldr	r3, [pc, #152]	@ (80005cc <MX_GPIO_Init+0x108>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	4a25      	ldr	r2, [pc, #148]	@ (80005cc <MX_GPIO_Init+0x108>)
 8000538:	f043 0302 	orr.w	r3, r3, #2
 800053c:	6313      	str	r3, [r2, #48]	@ 0x30
 800053e:	4b23      	ldr	r3, [pc, #140]	@ (80005cc <MX_GPIO_Init+0x108>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	f003 0302 	and.w	r3, r3, #2
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIR_Pin, GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8000550:	481f      	ldr	r0, [pc, #124]	@ (80005d0 <MX_GPIO_Init+0x10c>)
 8000552:	f001 f8bb 	bl	80016cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000556:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800055a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800055c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000562:	2300      	movs	r3, #0
 8000564:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	4619      	mov	r1, r3
 800056c:	4819      	ldr	r0, [pc, #100]	@ (80005d4 <MX_GPIO_Init+0x110>)
 800056e:	f000 ff11 	bl	8001394 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|DIR_Pin;
 8000572:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8000576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000578:	2301      	movs	r3, #1
 800057a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000580:	2300      	movs	r3, #0
 8000582:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000584:	f107 0314 	add.w	r3, r7, #20
 8000588:	4619      	mov	r1, r3
 800058a:	4811      	ldr	r0, [pc, #68]	@ (80005d0 <MX_GPIO_Init+0x10c>)
 800058c:	f000 ff02 	bl	8001394 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HOME_Pin;
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000594:	2300      	movs	r3, #0
 8000596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HOME_GPIO_Port, &GPIO_InitStruct);
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4619      	mov	r1, r3
 80005a2:	480b      	ldr	r0, [pc, #44]	@ (80005d0 <MX_GPIO_Init+0x10c>)
 80005a4:	f000 fef6 	bl	8001394 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LIMIT1_Pin|LIMIT2_Pin;
 80005a8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80005ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4619      	mov	r1, r3
 80005bc:	4806      	ldr	r0, [pc, #24]	@ (80005d8 <MX_GPIO_Init+0x114>)
 80005be:	f000 fee9 	bl	8001394 <HAL_GPIO_Init>

}
 80005c2:	bf00      	nop
 80005c4:	3728      	adds	r7, #40	@ 0x28
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40020000 	.word	0x40020000
 80005d4:	40020800 	.word	0x40020800
 80005d8:	40020400 	.word	0x40020400

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fd2f 	bl	8001044 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f837 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f7ff ff6b 	bl	80004c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ee:	f000 fc8d 	bl	8000f0c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005f2:	f000 fbbd 	bl	8000d70 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005f6:	f000 f89b 	bl	8000730 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  direction dir = CW;
 80005fa:	2301      	movs	r3, #1
 80005fc:	71fb      	strb	r3, [r7, #7]

  HAL_Delay(3000);
 80005fe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000602:	f000 fd91 	bl	8001128 <HAL_Delay>

  stepper_init(&stepper, &htim2, TIM_CHANNEL_3);
 8000606:	2208      	movs	r2, #8
 8000608:	4910      	ldr	r1, [pc, #64]	@ (800064c <main+0x70>)
 800060a:	4811      	ldr	r0, [pc, #68]	@ (8000650 <main+0x74>)
 800060c:	f000 f8c8 	bl	80007a0 <stepper_init>
  stepper_set_ramp_profile(&stepper, LINEAR_SPEED, 340, 200, 200);
 8000610:	23c8      	movs	r3, #200	@ 0xc8
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	23c8      	movs	r3, #200	@ 0xc8
 8000616:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 800061a:	2101      	movs	r1, #1
 800061c:	480c      	ldr	r0, [pc, #48]	@ (8000650 <main+0x74>)
 800061e:	f000 f8d4 	bl	80007ca <stepper_set_ramp_profile>
  //stepper_set_angle(&stepper, dir, 2*360);
 stepper_set_continous(&stepper, dir);
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	4619      	mov	r1, r3
 8000626:	480a      	ldr	r0, [pc, #40]	@ (8000650 <main+0x74>)
 8000628:	f000 f8eb 	bl	8000802 <stepper_set_continous>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  stepper_ramp_process(&stepper);
 800062c:	4808      	ldr	r0, [pc, #32]	@ (8000650 <main+0x74>)
 800062e:	f000 fa69 	bl	8000b04 <stepper_ramp_process>

	  	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0)
 8000632:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000636:	4807      	ldr	r0, [pc, #28]	@ (8000654 <main+0x78>)
 8000638:	f001 f830 	bl	800169c <HAL_GPIO_ReadPin>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d1f4      	bne.n	800062c <main+0x50>
	  		  stepper_stop_with_profile(&stepper);
 8000642:	4803      	ldr	r0, [pc, #12]	@ (8000650 <main+0x74>)
 8000644:	f000 f932 	bl	80008ac <stepper_stop_with_profile>
	  stepper_ramp_process(&stepper);
 8000648:	e7f0      	b.n	800062c <main+0x50>
 800064a:	bf00      	nop
 800064c:	20000060 	.word	0x20000060
 8000650:	20000028 	.word	0x20000028
 8000654:	40020800 	.word	0x40020800

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	@ 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2230      	movs	r2, #48	@ 0x30
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f002 ffac 	bl	80035c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	4b29      	ldr	r3, [pc, #164]	@ (8000728 <SystemClock_Config+0xd0>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000684:	4a28      	ldr	r2, [pc, #160]	@ (8000728 <SystemClock_Config+0xd0>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	@ 0x40
 800068c:	4b26      	ldr	r3, [pc, #152]	@ (8000728 <SystemClock_Config+0xd0>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	4b23      	ldr	r3, [pc, #140]	@ (800072c <SystemClock_Config+0xd4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006a4:	4a21      	ldr	r2, [pc, #132]	@ (800072c <SystemClock_Config+0xd4>)
 80006a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <SystemClock_Config+0xd4>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b8:	2302      	movs	r3, #2
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c0:	2310      	movs	r3, #16
 80006c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006cc:	2310      	movs	r3, #16
 80006ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006d0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006d6:	2304      	movs	r3, #4
 80006d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006da:	2307      	movs	r3, #7
 80006dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 f80c 	bl	8001700 <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ee:	f000 f851 	bl	8000794 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	230f      	movs	r3, #15
 80006f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f6:	2302      	movs	r3, #2
 80006f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000702:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2102      	movs	r1, #2
 800070e:	4618      	mov	r0, r3
 8000710:	f001 fa6e 	bl	8001bf0 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800071a:	f000 f83b 	bl	8000794 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	@ 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	2100      	movs	r1, #0
 8000738:	201c      	movs	r0, #28
 800073a:	f000 fdf4 	bl	8001326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800073e:	201c      	movs	r0, #28
 8000740:	f000 fe0d 	bl	800135e <HAL_NVIC_EnableIRQ>
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == stepper.timer.htim->Instance)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	429a      	cmp	r2, r3
 800075c:	d113      	bne.n	8000786 <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
	{
		stepper.ustep_counter++;
 800075e:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000762:	3301      	adds	r3, #1
 8000764:	4a0a      	ldr	r2, [pc, #40]	@ (8000790 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8000766:	6253      	str	r3, [r2, #36]	@ 0x24

		if(angle == stepper.mode)
 8000768:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 800076a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d109      	bne.n	8000786 <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
		{
			if(stepper.ustep_counter >= stepper.usteps_to_count)
 8000772:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8000774:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000776:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8000778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800077a:	429a      	cmp	r2, r3
 800077c:	d303      	bcc.n	8000786 <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
			{
				stepper_set_speed(&stepper, 0);
 800077e:	2100      	movs	r1, #0
 8000780:	4803      	ldr	r0, [pc, #12]	@ (8000790 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8000782:	f000 f8c5 	bl	8000910 <stepper_set_speed>
			}
		}
	}
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000028 	.word	0x20000028

08000794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000798:	b672      	cpsid	i
}
 800079a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <Error_Handler+0x8>

080007a0 <stepper_init>:
#include <math.h>

#include "main.h"

void stepper_init(struct stepper_s *_stepper, TIM_HandleTypeDef *_htim, uint32_t _channel)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
	_stepper->timer.htim = _htim;
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	68ba      	ldr	r2, [r7, #8]
 80007b0:	601a      	str	r2, [r3, #0]
	_stepper->timer.channel = _channel;
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	605a      	str	r2, [r3, #4]

	_stepper->target_speed_achieved = 0;
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	2200      	movs	r2, #0
 80007bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80007be:	bf00      	nop
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <stepper_set_ramp_profile>:

void stepper_set_ramp_profile(struct stepper_s *_stepper, profile_mode _mode, uint32_t _target_speed, uint32_t _accel, uint32_t _decel)
{
 80007ca:	b480      	push	{r7}
 80007cc:	b085      	sub	sp, #20
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	60f8      	str	r0, [r7, #12]
 80007d2:	60b9      	str	r1, [r7, #8]
 80007d4:	607a      	str	r2, [r7, #4]
 80007d6:	603b      	str	r3, [r7, #0]
	_stepper->profile.mode = _mode;
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	68ba      	ldr	r2, [r7, #8]
 80007dc:	609a      	str	r2, [r3, #8]
	_stepper->profile.target_speed = _target_speed * MICRO_STEP;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	019a      	lsls	r2, r3, #6
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	60da      	str	r2, [r3, #12]
	_stepper->profile.accel = _accel * MICRO_STEP;
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	019a      	lsls	r2, r3, #6
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	611a      	str	r2, [r3, #16]
	_stepper->profile.decel = _decel * MICRO_STEP;
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	019a      	lsls	r2, r3, #6
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	615a      	str	r2, [r3, #20]
}
 80007f6:	bf00      	nop
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <stepper_set_continous>:

void stepper_set_continous(struct stepper_s *_stepper, direction _dir)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
 800080a:	460b      	mov	r3, r1
 800080c:	70fb      	strb	r3, [r7, #3]
	_stepper->mode = continous;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2202      	movs	r2, #2
 8000812:	f883 2020 	strb.w	r2, [r3, #32]

	stepper_set_direction(_stepper, _dir);
 8000816:	78fb      	ldrb	r3, [r7, #3]
 8000818:	4619      	mov	r1, r3
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f000 f858 	bl	80008d0 <stepper_set_direction>
	stepper_ramp_init(_stepper);
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f000 f8e3 	bl	80009ec <stepper_ramp_init>

	HAL_TIM_PWM_Start_IT(_stepper->timer.htim, _stepper->timer.channel);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	4619      	mov	r1, r3
 8000830:	4610      	mov	r0, r2
 8000832:	f001 fd09 	bl	8002248 <HAL_TIM_PWM_Start_IT>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <stepper_imediate_stop>:

	HAL_TIM_PWM_Start_IT(_stepper->timer.htim, _stepper->timer.channel);
}

void stepper_imediate_stop(struct stepper_s *_stepper)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
	_stepper->mode = idle;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2200      	movs	r2, #0
 800084a:	f883 2020 	strb.w	r2, [r3, #32]

	__HAL_TIM_SET_COMPARE(_stepper->timer.htim, _stepper->timer.channel, 0);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d105      	bne.n	8000862 <stepper_imediate_stop+0x24>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2200      	movs	r2, #0
 800085e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000860:	e018      	b.n	8000894 <stepper_imediate_stop+0x56>
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	2b04      	cmp	r3, #4
 8000868:	d105      	bne.n	8000876 <stepper_imediate_stop+0x38>
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	2300      	movs	r3, #0
 8000872:	6393      	str	r3, [r2, #56]	@ 0x38
 8000874:	e00e      	b.n	8000894 <stepper_imediate_stop+0x56>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	2b08      	cmp	r3, #8
 800087c:	d105      	bne.n	800088a <stepper_imediate_stop+0x4c>
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	2300      	movs	r3, #0
 8000886:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000888:	e004      	b.n	8000894 <stepper_imediate_stop+0x56>
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	2300      	movs	r3, #0
 8000892:	6413      	str	r3, [r2, #64]	@ 0x40
	HAL_TIM_PWM_Stop(_stepper->timer.htim, _stepper->timer.channel);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	4619      	mov	r1, r3
 800089e:	4610      	mov	r0, r2
 80008a0:	f001 fc6e 	bl	8002180 <HAL_TIM_PWM_Stop>
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <stepper_stop_with_profile>:

void stepper_stop_with_profile(struct stepper_s *_stepper)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	_stepper->mode = stop;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2203      	movs	r2, #3
 80008b8:	f883 2020 	strb.w	r2, [r3, #32]
	_stepper->ustep_counter = 0;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
	...

080008d0 <stepper_set_direction>:

void stepper_set_direction(struct stepper_s *_stepper, direction _dir)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	70fb      	strb	r3, [r7, #3]
	if(_dir == CCW)
 80008dc:	78fb      	ldrb	r3, [r7, #3]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d106      	bne.n	80008f0 <stepper_set_direction+0x20>
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, CCW);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008e8:	4808      	ldr	r0, [pc, #32]	@ (800090c <stepper_set_direction+0x3c>)
 80008ea:	f000 feef 	bl	80016cc <HAL_GPIO_WritePin>
	else if(_dir == CW)
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, CW);
}
 80008ee:	e008      	b.n	8000902 <stepper_set_direction+0x32>
	else if(_dir == CW)
 80008f0:	78fb      	ldrb	r3, [r7, #3]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d105      	bne.n	8000902 <stepper_set_direction+0x32>
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, CW);
 80008f6:	2201      	movs	r2, #1
 80008f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008fc:	4803      	ldr	r0, [pc, #12]	@ (800090c <stepper_set_direction+0x3c>)
 80008fe:	f000 fee5 	bl	80016cc <HAL_GPIO_WritePin>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40020000 	.word	0x40020000

08000910 <stepper_set_speed>:

void stepper_set_speed(struct stepper_s *_stepper, uint32_t _speed)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
	uint32_t counter, freq;

	_stepper->actual_speed = _speed;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	683a      	ldr	r2, [r7, #0]
 800091e:	62da      	str	r2, [r3, #44]	@ 0x2c

	if(_speed > STEPPER_MOTOR_MAX_SPEED_USTEP_PER_SEC)
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	f5b3 4f7a 	cmp.w	r3, #64000	@ 0xfa00
 8000926:	d903      	bls.n	8000930 <stepper_set_speed+0x20>
	{
		_speed = STEPPER_MOTOR_MAX_SPEED_USTEP_PER_SEC;
 8000928:	f44f 437a 	mov.w	r3, #64000	@ 0xfa00
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	e006      	b.n	800093e <stepper_set_speed+0x2e>
	}
	else if(_speed == 0)
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d103      	bne.n	800093e <stepper_set_speed+0x2e>
	{
		stepper_imediate_stop(_stepper);
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f7ff ff81 	bl	800083e <stepper_imediate_stop>
		return;
 800093c:	e050      	b.n	80009e0 <stepper_set_speed+0xd0>
	}

	freq = (_speed * (STEPPER_MOTOR_MAX_FREQ_HZ - STEPPER_MOTOR_MIN_FREQ_HZ))/STEPPER_MOTOR_MAX_SPEED_USTEP_PER_SEC;
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8000944:	fb02 f303 	mul.w	r3, r2, r3
 8000948:	4a27      	ldr	r2, [pc, #156]	@ (80009e8 <stepper_set_speed+0xd8>)
 800094a:	fba2 2303 	umull	r2, r3, r2, r3
 800094e:	0b1b      	lsrs	r3, r3, #12
 8000950:	60fb      	str	r3, [r7, #12]
	counter = HAL_RCC_GetPCLK1Freq() / (_stepper->timer.htim->Init.Prescaler * freq);
 8000952:	f001 fb45 	bl	8001fe0 <HAL_RCC_GetPCLK1Freq>
 8000956:	4601      	mov	r1, r0
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	68fa      	ldr	r2, [r7, #12]
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	fbb1 f3f3 	udiv	r3, r1, r3
 8000968:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SET_COUNTER(_stepper->timer.htim, 0);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2200      	movs	r2, #0
 8000972:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_AUTORELOAD(_stepper->timer.htim, counter - 1);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	68ba      	ldr	r2, [r7, #8]
 800097c:	3a01      	subs	r2, #1
 800097e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	68ba      	ldr	r2, [r7, #8]
 8000986:	3a01      	subs	r2, #1
 8000988:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(_stepper->timer.htim, _stepper->timer.channel, (counter/2) - 1);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d107      	bne.n	80009a2 <stepper_set_speed+0x92>
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	085a      	lsrs	r2, r3, #1
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	3a01      	subs	r2, #1
 800099e:	635a      	str	r2, [r3, #52]	@ 0x34
 80009a0:	e01e      	b.n	80009e0 <stepper_set_speed+0xd0>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	2b04      	cmp	r3, #4
 80009a8:	d107      	bne.n	80009ba <stepper_set_speed+0xaa>
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	085b      	lsrs	r3, r3, #1
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	6812      	ldr	r2, [r2, #0]
 80009b2:	6812      	ldr	r2, [r2, #0]
 80009b4:	3b01      	subs	r3, #1
 80009b6:	6393      	str	r3, [r2, #56]	@ 0x38
 80009b8:	e012      	b.n	80009e0 <stepper_set_speed+0xd0>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	2b08      	cmp	r3, #8
 80009c0:	d107      	bne.n	80009d2 <stepper_set_speed+0xc2>
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	085b      	lsrs	r3, r3, #1
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	6812      	ldr	r2, [r2, #0]
 80009ca:	6812      	ldr	r2, [r2, #0]
 80009cc:	3b01      	subs	r3, #1
 80009ce:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80009d0:	e006      	b.n	80009e0 <stepper_set_speed+0xd0>
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	085b      	lsrs	r3, r3, #1
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	6812      	ldr	r2, [r2, #0]
 80009da:	6812      	ldr	r2, [r2, #0]
 80009dc:	3b01      	subs	r3, #1
 80009de:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	10624dd3 	.word	0x10624dd3

080009ec <stepper_ramp_init>:

void stepper_ramp_init(struct stepper_s *_stepper)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	switch (_stepper->profile.mode)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d002      	beq.n	8000a02 <stepper_ramp_init+0x16>
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d007      	beq.n	8000a10 <stepper_ramp_init+0x24>
		{
			stepper_ramp_init_linear_mode(_stepper);
			break;
		}
		default:
			break;
 8000a00:	e00a      	b.n	8000a18 <stepper_ramp_init+0x2c>
			stepper_set_speed(_stepper, _stepper->profile.target_speed);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	68db      	ldr	r3, [r3, #12]
 8000a06:	4619      	mov	r1, r3
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f7ff ff81 	bl	8000910 <stepper_set_speed>
			break;
 8000a0e:	e003      	b.n	8000a18 <stepper_ramp_init+0x2c>
			stepper_ramp_init_linear_mode(_stepper);
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f000 f805 	bl	8000a20 <stepper_ramp_init_linear_mode>
			break;
 8000a16:	bf00      	nop
	}
}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <stepper_ramp_init_linear_mode>:

void stepper_ramp_init_linear_mode(struct stepper_s *_stepper)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	stepper_set_speed(_stepper, _stepper->profile.accel/STEPPER_MOTOR_TASK_FREQUENCY);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	691b      	ldr	r3, [r3, #16]
 8000a2c:	4a34      	ldr	r2, [pc, #208]	@ (8000b00 <stepper_ramp_init_linear_mode+0xe0>)
 8000a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a32:	095b      	lsrs	r3, r3, #5
 8000a34:	4619      	mov	r1, r3
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f7ff ff6a 	bl	8000910 <stepper_set_speed>

	if(continous == _stepper->mode)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a42:	2b02      	cmp	r3, #2
 8000a44:	d11a      	bne.n	8000a7c <stepper_ramp_init_linear_mode+0x5c>
	{
		_stepper->ramp.usteps_to_full_speed = (_stepper->profile.target_speed * _stepper->profile.target_speed) / (2 *_stepper->profile.accel);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	68d2      	ldr	r2, [r2, #12]
 8000a4e:	fb03 f202 	mul.w	r2, r3, r2
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	691b      	ldr	r3, [r3, #16]
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	619a      	str	r2, [r3, #24]
		_stepper->ramp.usteps_to_stop = (_stepper->profile.target_speed * _stepper->profile.target_speed) / (2 *_stepper->profile.decel);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	68d2      	ldr	r2, [r2, #12]
 8000a68:	fb03 f202 	mul.w	r2, r3, r2
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	695b      	ldr	r3, [r3, #20]
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	61da      	str	r2, [r3, #28]
		{
			_stepper->ramp.usteps_to_full_speed = (_stepper->usteps_to_count * _stepper->profile.decel) / (_stepper->profile.accel + _stepper->profile.decel);
			_stepper->ramp.usteps_to_stop = _stepper->usteps_to_count - _stepper->ramp.usteps_to_full_speed;
		}
	}
}
 8000a7a:	e03d      	b.n	8000af8 <stepper_ramp_init_linear_mode+0xd8>
	else if(angle == _stepper->mode)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d138      	bne.n	8000af8 <stepper_ramp_init_linear_mode+0xd8>
		_stepper->ramp.usteps_to_full_speed = (_stepper->profile.target_speed * _stepper->profile.target_speed) / (2 *_stepper->profile.accel);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	68db      	ldr	r3, [r3, #12]
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	68d2      	ldr	r2, [r2, #12]
 8000a8e:	fb03 f202 	mul.w	r2, r3, r2
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	691b      	ldr	r3, [r3, #16]
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	619a      	str	r2, [r3, #24]
		_stepper->ramp.usteps_to_stop = (_stepper->profile.target_speed * _stepper->profile.target_speed) / (2 *_stepper->profile.decel);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	68d2      	ldr	r2, [r2, #12]
 8000aa8:	fb03 f202 	mul.w	r2, r3, r2
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	695b      	ldr	r3, [r3, #20]
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	61da      	str	r2, [r3, #28]
		if(_stepper->usteps_to_count < (_stepper->ramp.usteps_to_full_speed + _stepper->ramp.usteps_to_stop))
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6999      	ldr	r1, [r3, #24]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	440b      	add	r3, r1
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d215      	bcs.n	8000af8 <stepper_ramp_init_linear_mode+0xd8>
			_stepper->ramp.usteps_to_full_speed = (_stepper->usteps_to_count * _stepper->profile.decel) / (_stepper->profile.accel + _stepper->profile.decel);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	6952      	ldr	r2, [r2, #20]
 8000ad4:	fb03 f202 	mul.w	r2, r3, r2
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6919      	ldr	r1, [r3, #16]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	695b      	ldr	r3, [r3, #20]
 8000ae0:	440b      	add	r3, r1
 8000ae2:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	619a      	str	r2, [r3, #24]
			_stepper->ramp.usteps_to_stop = _stepper->usteps_to_count - _stepper->ramp.usteps_to_full_speed;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	1ad2      	subs	r2, r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	61da      	str	r2, [r3, #28]
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	51eb851f 	.word	0x51eb851f

08000b04 <stepper_ramp_process>:

void stepper_ramp_process(struct stepper_s *_stepper)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	static uint32_t time_ms = 0;

	if(0 == time_ms)
 8000b0c:	4b16      	ldr	r3, [pc, #88]	@ (8000b68 <stepper_ramp_process+0x64>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d104      	bne.n	8000b1e <stepper_ramp_process+0x1a>
		time_ms = HAL_GetTick();
 8000b14:	f000 fafc 	bl	8001110 <HAL_GetTick>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	4a13      	ldr	r2, [pc, #76]	@ (8000b68 <stepper_ramp_process+0x64>)
 8000b1c:	6013      	str	r3, [r2, #0]

	if((HAL_GetTick() - time_ms) < STEPPER_MOTOR_TASK_PERIOD)
 8000b1e:	f000 faf7 	bl	8001110 <HAL_GetTick>
 8000b22:	4602      	mov	r2, r0
 8000b24:	4b10      	ldr	r3, [pc, #64]	@ (8000b68 <stepper_ramp_process+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	2b09      	cmp	r3, #9
 8000b2c:	d914      	bls.n	8000b58 <stepper_ramp_process+0x54>
		return;

	time_ms = HAL_GetTick();
 8000b2e:	f000 faef 	bl	8001110 <HAL_GetTick>
 8000b32:	4603      	mov	r3, r0
 8000b34:	4a0c      	ldr	r2, [pc, #48]	@ (8000b68 <stepper_ramp_process+0x64>)
 8000b36:	6013      	str	r3, [r2, #0]

	if(idle == _stepper->mode)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d00c      	beq.n	8000b5c <stepper_ramp_process+0x58>
		return;

	switch (_stepper->profile.mode)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d00a      	beq.n	8000b60 <stepper_ramp_process+0x5c>
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d000      	beq.n	8000b50 <stepper_ramp_process+0x4c>
		{
			stepper_ramp_process_linear_mode(_stepper);
			break;
		}
		default:
			break;
 8000b4e:	e008      	b.n	8000b62 <stepper_ramp_process+0x5e>
			stepper_ramp_process_linear_mode(_stepper);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f000 f80b 	bl	8000b6c <stepper_ramp_process_linear_mode>
			break;
 8000b56:	e004      	b.n	8000b62 <stepper_ramp_process+0x5e>
		return;
 8000b58:	bf00      	nop
 8000b5a:	e002      	b.n	8000b62 <stepper_ramp_process+0x5e>
		return;
 8000b5c:	bf00      	nop
 8000b5e:	e000      	b.n	8000b62 <stepper_ramp_process+0x5e>
			break;
 8000b60:	bf00      	nop

	}
}
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	2000005c 	.word	0x2000005c

08000b6c <stepper_ramp_process_linear_mode>:

void stepper_ramp_process_linear_mode(struct stepper_s *_stepper)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	uint32_t speed = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]

	if(continous == _stepper->mode)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d11f      	bne.n	8000bc2 <stepper_ramp_process_linear_mode+0x56>
	{
		if(_stepper->ustep_counter < _stepper->ramp.usteps_to_full_speed && _stepper->target_speed_achieved != 1)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d20e      	bcs.n	8000bac <stepper_ramp_process_linear_mode+0x40>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d00a      	beq.n	8000bac <stepper_ramp_process_linear_mode+0x40>
		{
			speed = _stepper->actual_speed + (_stepper->profile.accel / STEPPER_MOTOR_TASK_FREQUENCY);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	691b      	ldr	r3, [r3, #16]
 8000b9e:	4939      	ldr	r1, [pc, #228]	@ (8000c84 <stepper_ramp_process_linear_mode+0x118>)
 8000ba0:	fba1 1303 	umull	r1, r3, r1, r3
 8000ba4:	095b      	lsrs	r3, r3, #5
 8000ba6:	4413      	add	r3, r2
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	e005      	b.n	8000bb8 <stepper_ramp_process_linear_mode+0x4c>
		}
		else
		{
			_stepper->target_speed_achieved = 1;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2201      	movs	r2, #1
 8000bb0:	631a      	str	r2, [r3, #48]	@ 0x30
			speed = _stepper->profile.target_speed;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	60fb      	str	r3, [r7, #12]
		}

		stepper_set_speed(_stepper, speed);
 8000bb8:	68f9      	ldr	r1, [r7, #12]
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff fea8 	bl	8000910 <stepper_set_speed>
		else
		{
			stepper_imediate_stop(_stepper);
		}
	}
}
 8000bc0:	e05b      	b.n	8000c7a <stepper_ramp_process_linear_mode+0x10e>
	else if(angle == _stepper->mode)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d133      	bne.n	8000c34 <stepper_ramp_process_linear_mode+0xc8>
		if(_stepper->ustep_counter < _stepper->ramp.usteps_to_full_speed)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d20a      	bcs.n	8000bee <stepper_ramp_process_linear_mode+0x82>
			speed = _stepper->actual_speed + (_stepper->profile.accel / STEPPER_MOTOR_TASK_FREQUENCY);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	691b      	ldr	r3, [r3, #16]
 8000be0:	4928      	ldr	r1, [pc, #160]	@ (8000c84 <stepper_ramp_process_linear_mode+0x118>)
 8000be2:	fba1 1303 	umull	r1, r3, r1, r3
 8000be6:	095b      	lsrs	r3, r3, #5
 8000be8:	4413      	add	r3, r2
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	e01d      	b.n	8000c2a <stepper_ramp_process_linear_mode+0xbe>
		else if((_stepper->usteps_to_count - _stepper->ustep_counter) < _stepper->ramp.usteps_to_stop)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bf6:	1ad2      	subs	r2, r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	69db      	ldr	r3, [r3, #28]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d211      	bcs.n	8000c24 <stepper_ramp_process_linear_mode+0xb8>
			speed = _stepper->actual_speed - (_stepper->profile.decel / STEPPER_MOTOR_TASK_FREQUENCY);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	695b      	ldr	r3, [r3, #20]
 8000c08:	491e      	ldr	r1, [pc, #120]	@ (8000c84 <stepper_ramp_process_linear_mode+0x118>)
 8000c0a:	fba1 1303 	umull	r1, r3, r1, r3
 8000c0e:	095b      	lsrs	r3, r3, #5
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	60fb      	str	r3, [r7, #12]
			if(speed < STEPPER_MOTOR_MIN_SPEED_USTEP_PER_SEC)
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8000c1a:	d206      	bcs.n	8000c2a <stepper_ramp_process_linear_mode+0xbe>
				speed = STEPPER_MOTOR_MIN_SPEED_USTEP_PER_SEC;
 8000c1c:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	e002      	b.n	8000c2a <stepper_ramp_process_linear_mode+0xbe>
			speed = _stepper->profile.target_speed;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	60fb      	str	r3, [r7, #12]
		stepper_set_speed(_stepper, speed);
 8000c2a:	68f9      	ldr	r1, [r7, #12]
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff fe6f 	bl	8000910 <stepper_set_speed>
}
 8000c32:	e022      	b.n	8000c7a <stepper_ramp_process_linear_mode+0x10e>
	else if(stop == _stepper->mode)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c3a:	2b03      	cmp	r3, #3
 8000c3c:	d11d      	bne.n	8000c7a <stepper_ramp_process_linear_mode+0x10e>
		if(_stepper->ustep_counter < _stepper->ramp.usteps_to_stop)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d214      	bcs.n	8000c74 <stepper_ramp_process_linear_mode+0x108>
			speed = _stepper->actual_speed - (_stepper->profile.decel / STEPPER_MOTOR_TASK_FREQUENCY);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	490c      	ldr	r1, [pc, #48]	@ (8000c84 <stepper_ramp_process_linear_mode+0x118>)
 8000c54:	fba1 1303 	umull	r1, r3, r1, r3
 8000c58:	095b      	lsrs	r3, r3, #5
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	60fb      	str	r3, [r7, #12]
			if(speed < STEPPER_MOTOR_MIN_SPEED_USTEP_PER_SEC)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8000c64:	d201      	bcs.n	8000c6a <stepper_ramp_process_linear_mode+0xfe>
				speed = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
			stepper_set_speed(_stepper, speed);
 8000c6a:	68f9      	ldr	r1, [r7, #12]
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f7ff fe4f 	bl	8000910 <stepper_set_speed>
}
 8000c72:	e002      	b.n	8000c7a <stepper_ramp_process_linear_mode+0x10e>
			stepper_imediate_stop(_stepper);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff fde2 	bl	800083e <stepper_imediate_stop>
}
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	51eb851f 	.word	0x51eb851f

08000c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	4b10      	ldr	r3, [pc, #64]	@ (8000cd4 <HAL_MspInit+0x4c>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c96:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd4 <HAL_MspInit+0x4c>)
 8000c98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd4 <HAL_MspInit+0x4c>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	4b09      	ldr	r3, [pc, #36]	@ (8000cd4 <HAL_MspInit+0x4c>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb2:	4a08      	ldr	r2, [pc, #32]	@ (8000cd4 <HAL_MspInit+0x4c>)
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cba:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <HAL_MspInit+0x4c>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cc6:	2007      	movs	r0, #7
 8000cc8:	f000 fb22 	bl	8001310 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40023800 	.word	0x40023800

08000cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <NMI_Handler+0x4>

08000ce0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <HardFault_Handler+0x4>

08000ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <MemManage_Handler+0x4>

08000cf0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <BusFault_Handler+0x4>

08000cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <UsageFault_Handler+0x4>

08000d00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2e:	f000 f9db 	bl	80010e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d3c:	4802      	ldr	r0, [pc, #8]	@ (8000d48 <TIM2_IRQHandler+0x10>)
 8000d3e:	f001 fb81 	bl	8002444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000060 	.word	0x20000060

08000d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <SystemInit+0x20>)
 8000d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d56:	4a05      	ldr	r2, [pc, #20]	@ (8000d6c <SystemInit+0x20>)
 8000d58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08e      	sub	sp, #56	@ 0x38
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d84:	f107 0320 	add.w	r3, r7, #32
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
 8000d9c:	615a      	str	r2, [r3, #20]
 8000d9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000da0:	4b2d      	ldr	r3, [pc, #180]	@ (8000e58 <MX_TIM2_Init+0xe8>)
 8000da2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000da6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41;
 8000da8:	4b2b      	ldr	r3, [pc, #172]	@ (8000e58 <MX_TIM2_Init+0xe8>)
 8000daa:	2229      	movs	r2, #41	@ 0x29
 8000dac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dae:	4b2a      	ldr	r3, [pc, #168]	@ (8000e58 <MX_TIM2_Init+0xe8>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000db4:	4b28      	ldr	r3, [pc, #160]	@ (8000e58 <MX_TIM2_Init+0xe8>)
 8000db6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000dba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dbc:	4b26      	ldr	r3, [pc, #152]	@ (8000e58 <MX_TIM2_Init+0xe8>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc2:	4b25      	ldr	r3, [pc, #148]	@ (8000e58 <MX_TIM2_Init+0xe8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dc8:	4823      	ldr	r0, [pc, #140]	@ (8000e58 <MX_TIM2_Init+0xe8>)
 8000dca:	f001 f931 	bl	8002030 <HAL_TIM_Base_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000dd4:	f7ff fcde 	bl	8000794 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dde:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000de2:	4619      	mov	r1, r3
 8000de4:	481c      	ldr	r0, [pc, #112]	@ (8000e58 <MX_TIM2_Init+0xe8>)
 8000de6:	f001 fcdf 	bl	80027a8 <HAL_TIM_ConfigClockSource>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000df0:	f7ff fcd0 	bl	8000794 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000df4:	4818      	ldr	r0, [pc, #96]	@ (8000e58 <MX_TIM2_Init+0xe8>)
 8000df6:	f001 f96a 	bl	80020ce <HAL_TIM_PWM_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000e00:	f7ff fcc8 	bl	8000794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e04:	2300      	movs	r3, #0
 8000e06:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e0c:	f107 0320 	add.w	r3, r7, #32
 8000e10:	4619      	mov	r1, r3
 8000e12:	4811      	ldr	r0, [pc, #68]	@ (8000e58 <MX_TIM2_Init+0xe8>)
 8000e14:	f002 f890 	bl	8002f38 <HAL_TIMEx_MasterConfigSynchronization>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000e1e:	f7ff fcb9 	bl	8000794 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e22:	2360      	movs	r3, #96	@ 0x60
 8000e24:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4999;
 8000e26:	f241 3387 	movw	r3, #4999	@ 0x1387
 8000e2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e34:	1d3b      	adds	r3, r7, #4
 8000e36:	2208      	movs	r2, #8
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4807      	ldr	r0, [pc, #28]	@ (8000e58 <MX_TIM2_Init+0xe8>)
 8000e3c:	f001 fbf2 	bl	8002624 <HAL_TIM_PWM_ConfigChannel>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000e46:	f7ff fca5 	bl	8000794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e4a:	4803      	ldr	r0, [pc, #12]	@ (8000e58 <MX_TIM2_Init+0xe8>)
 8000e4c:	f000 f826 	bl	8000e9c <HAL_TIM_MspPostInit>

}
 8000e50:	bf00      	nop
 8000e52:	3738      	adds	r7, #56	@ 0x38
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000060 	.word	0x20000060

08000e5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e6c:	d10d      	bne.n	8000e8a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b09      	ldr	r3, [pc, #36]	@ (8000e98 <HAL_TIM_Base_MspInit+0x3c>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e76:	4a08      	ldr	r2, [pc, #32]	@ (8000e98 <HAL_TIM_Base_MspInit+0x3c>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e7e:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_TIM_Base_MspInit+0x3c>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800

08000e9c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ebc:	d11e      	bne.n	8000efc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	4b10      	ldr	r3, [pc, #64]	@ (8000f04 <HAL_TIM_MspPostInit+0x68>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	4a0f      	ldr	r2, [pc, #60]	@ (8000f04 <HAL_TIM_MspPostInit+0x68>)
 8000ec8:	f043 0302 	orr.w	r3, r3, #2
 8000ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ece:	4b0d      	ldr	r3, [pc, #52]	@ (8000f04 <HAL_TIM_MspPostInit+0x68>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = STEP_Pin;
 8000eda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ede:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000eec:	2301      	movs	r3, #1
 8000eee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4804      	ldr	r0, [pc, #16]	@ (8000f08 <HAL_TIM_MspPostInit+0x6c>)
 8000ef8:	f000 fa4c 	bl	8001394 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000efc:	bf00      	nop
 8000efe:	3720      	adds	r7, #32
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40020400 	.word	0x40020400

08000f0c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f10:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <MX_USART2_UART_Init+0x4c>)
 8000f12:	4a12      	ldr	r2, [pc, #72]	@ (8000f5c <MX_USART2_UART_Init+0x50>)
 8000f14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f16:	4b10      	ldr	r3, [pc, #64]	@ (8000f58 <MX_USART2_UART_Init+0x4c>)
 8000f18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f58 <MX_USART2_UART_Init+0x4c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	@ (8000f58 <MX_USART2_UART_Init+0x4c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f58 <MX_USART2_UART_Init+0x4c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f30:	4b09      	ldr	r3, [pc, #36]	@ (8000f58 <MX_USART2_UART_Init+0x4c>)
 8000f32:	220c      	movs	r2, #12
 8000f34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f36:	4b08      	ldr	r3, [pc, #32]	@ (8000f58 <MX_USART2_UART_Init+0x4c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <MX_USART2_UART_Init+0x4c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f42:	4805      	ldr	r0, [pc, #20]	@ (8000f58 <MX_USART2_UART_Init+0x4c>)
 8000f44:	f002 f87a 	bl	800303c <HAL_UART_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f4e:	f7ff fc21 	bl	8000794 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200000a8 	.word	0x200000a8
 8000f5c:	40004400 	.word	0x40004400

08000f60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	@ 0x28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a19      	ldr	r2, [pc, #100]	@ (8000fe4 <HAL_UART_MspInit+0x84>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d12b      	bne.n	8000fda <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	4b18      	ldr	r3, [pc, #96]	@ (8000fe8 <HAL_UART_MspInit+0x88>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8a:	4a17      	ldr	r2, [pc, #92]	@ (8000fe8 <HAL_UART_MspInit+0x88>)
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f92:	4b15      	ldr	r3, [pc, #84]	@ (8000fe8 <HAL_UART_MspInit+0x88>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <HAL_UART_MspInit+0x88>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	4a10      	ldr	r2, [pc, #64]	@ (8000fe8 <HAL_UART_MspInit+0x88>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fae:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe8 <HAL_UART_MspInit+0x88>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fba:	230c      	movs	r3, #12
 8000fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fca:	2307      	movs	r3, #7
 8000fcc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4805      	ldr	r0, [pc, #20]	@ (8000fec <HAL_UART_MspInit+0x8c>)
 8000fd6:	f000 f9dd 	bl	8001394 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fda:	bf00      	nop
 8000fdc:	3728      	adds	r7, #40	@ 0x28
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40004400 	.word	0x40004400
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40020000 	.word	0x40020000

08000ff0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ff0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001028 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ff4:	f7ff feaa 	bl	8000d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ff8:	480c      	ldr	r0, [pc, #48]	@ (800102c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ffa:	490d      	ldr	r1, [pc, #52]	@ (8001030 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8001034 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001000:	e002      	b.n	8001008 <LoopCopyDataInit>

08001002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001006:	3304      	adds	r3, #4

08001008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800100c:	d3f9      	bcc.n	8001002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100e:	4a0a      	ldr	r2, [pc, #40]	@ (8001038 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001010:	4c0a      	ldr	r4, [pc, #40]	@ (800103c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001014:	e001      	b.n	800101a <LoopFillZerobss>

08001016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001018:	3204      	adds	r2, #4

0800101a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800101c:	d3fb      	bcc.n	8001016 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800101e:	f002 fad9 	bl	80035d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001022:	f7ff fadb 	bl	80005dc <main>
  bx  lr    
 8001026:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001028:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800102c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001030:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001034:	0800365c 	.word	0x0800365c
  ldr r2, =_sbss
 8001038:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800103c:	200000f4 	.word	0x200000f4

08001040 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001040:	e7fe      	b.n	8001040 <ADC_IRQHandler>
	...

08001044 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001048:	4b0e      	ldr	r3, [pc, #56]	@ (8001084 <HAL_Init+0x40>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0d      	ldr	r2, [pc, #52]	@ (8001084 <HAL_Init+0x40>)
 800104e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001052:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001054:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0a      	ldr	r2, [pc, #40]	@ (8001084 <HAL_Init+0x40>)
 800105a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800105e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001060:	4b08      	ldr	r3, [pc, #32]	@ (8001084 <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a07      	ldr	r2, [pc, #28]	@ (8001084 <HAL_Init+0x40>)
 8001066:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800106a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106c:	2003      	movs	r0, #3
 800106e:	f000 f94f 	bl	8001310 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001072:	2000      	movs	r0, #0
 8001074:	f000 f808 	bl	8001088 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001078:	f7ff fe06 	bl	8000c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40023c00 	.word	0x40023c00

08001088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001090:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <HAL_InitTick+0x54>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b12      	ldr	r3, [pc, #72]	@ (80010e0 <HAL_InitTick+0x58>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800109e:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f967 	bl	800137a <HAL_SYSTICK_Config>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e00e      	b.n	80010d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b0f      	cmp	r3, #15
 80010ba:	d80a      	bhi.n	80010d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010bc:	2200      	movs	r2, #0
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	f04f 30ff 	mov.w	r0, #4294967295
 80010c4:	f000 f92f 	bl	8001326 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c8:	4a06      	ldr	r2, [pc, #24]	@ (80010e4 <HAL_InitTick+0x5c>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	e000      	b.n	80010d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000000 	.word	0x20000000
 80010e0:	20000008 	.word	0x20000008
 80010e4:	20000004 	.word	0x20000004

080010e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010ec:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <HAL_IncTick+0x20>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b06      	ldr	r3, [pc, #24]	@ (800110c <HAL_IncTick+0x24>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	4a04      	ldr	r2, [pc, #16]	@ (800110c <HAL_IncTick+0x24>)
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000008 	.word	0x20000008
 800110c:	200000f0 	.word	0x200000f0

08001110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return uwTick;
 8001114:	4b03      	ldr	r3, [pc, #12]	@ (8001124 <HAL_GetTick+0x14>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	200000f0 	.word	0x200000f0

08001128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001130:	f7ff ffee 	bl	8001110 <HAL_GetTick>
 8001134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001140:	d005      	beq.n	800114e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001142:	4b0a      	ldr	r3, [pc, #40]	@ (800116c <HAL_Delay+0x44>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4413      	add	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800114e:	bf00      	nop
 8001150:	f7ff ffde 	bl	8001110 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	429a      	cmp	r2, r3
 800115e:	d8f7      	bhi.n	8001150 <HAL_Delay+0x28>
  {
  }
}
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000008 	.word	0x20000008

08001170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001180:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800118c:	4013      	ands	r3, r2
 800118e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001198:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800119c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a2:	4a04      	ldr	r2, [pc, #16]	@ (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	60d3      	str	r3, [r2, #12]
}
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011bc:	4b04      	ldr	r3, [pc, #16]	@ (80011d0 <__NVIC_GetPriorityGrouping+0x18>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	0a1b      	lsrs	r3, r3, #8
 80011c2:	f003 0307 	and.w	r3, r3, #7
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	db0b      	blt.n	80011fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	f003 021f 	and.w	r2, r3, #31
 80011ec:	4907      	ldr	r1, [pc, #28]	@ (800120c <__NVIC_EnableIRQ+0x38>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	095b      	lsrs	r3, r3, #5
 80011f4:	2001      	movs	r0, #1
 80011f6:	fa00 f202 	lsl.w	r2, r0, r2
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000e100 	.word	0xe000e100

08001210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001220:	2b00      	cmp	r3, #0
 8001222:	db0a      	blt.n	800123a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	b2da      	uxtb	r2, r3
 8001228:	490c      	ldr	r1, [pc, #48]	@ (800125c <__NVIC_SetPriority+0x4c>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	0112      	lsls	r2, r2, #4
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	440b      	add	r3, r1
 8001234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001238:	e00a      	b.n	8001250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4908      	ldr	r1, [pc, #32]	@ (8001260 <__NVIC_SetPriority+0x50>)
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	3b04      	subs	r3, #4
 8001248:	0112      	lsls	r2, r2, #4
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	440b      	add	r3, r1
 800124e:	761a      	strb	r2, [r3, #24]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000e100 	.word	0xe000e100
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001264:	b480      	push	{r7}
 8001266:	b089      	sub	sp, #36	@ 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f1c3 0307 	rsb	r3, r3, #7
 800127e:	2b04      	cmp	r3, #4
 8001280:	bf28      	it	cs
 8001282:	2304      	movcs	r3, #4
 8001284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3304      	adds	r3, #4
 800128a:	2b06      	cmp	r3, #6
 800128c:	d902      	bls.n	8001294 <NVIC_EncodePriority+0x30>
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3b03      	subs	r3, #3
 8001292:	e000      	b.n	8001296 <NVIC_EncodePriority+0x32>
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	f04f 32ff 	mov.w	r2, #4294967295
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43da      	mvns	r2, r3
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	401a      	ands	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ac:	f04f 31ff 	mov.w	r1, #4294967295
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	fa01 f303 	lsl.w	r3, r1, r3
 80012b6:	43d9      	mvns	r1, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	4313      	orrs	r3, r2
         );
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3724      	adds	r7, #36	@ 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
	...

080012cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012dc:	d301      	bcc.n	80012e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012de:	2301      	movs	r3, #1
 80012e0:	e00f      	b.n	8001302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e2:	4a0a      	ldr	r2, [pc, #40]	@ (800130c <SysTick_Config+0x40>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ea:	210f      	movs	r1, #15
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f7ff ff8e 	bl	8001210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f4:	4b05      	ldr	r3, [pc, #20]	@ (800130c <SysTick_Config+0x40>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fa:	4b04      	ldr	r3, [pc, #16]	@ (800130c <SysTick_Config+0x40>)
 80012fc:	2207      	movs	r2, #7
 80012fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	e000e010 	.word	0xe000e010

08001310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ff29 	bl	8001170 <__NVIC_SetPriorityGrouping>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001326:	b580      	push	{r7, lr}
 8001328:	b086      	sub	sp, #24
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
 8001332:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001338:	f7ff ff3e 	bl	80011b8 <__NVIC_GetPriorityGrouping>
 800133c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	68b9      	ldr	r1, [r7, #8]
 8001342:	6978      	ldr	r0, [r7, #20]
 8001344:	f7ff ff8e 	bl	8001264 <NVIC_EncodePriority>
 8001348:	4602      	mov	r2, r0
 800134a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff5d 	bl	8001210 <__NVIC_SetPriority>
}
 8001356:	bf00      	nop
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff31 	bl	80011d4 <__NVIC_EnableIRQ>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ffa2 	bl	80012cc <SysTick_Config>
 8001388:	4603      	mov	r3, r0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	@ 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	e159      	b.n	8001664 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013b0:	2201      	movs	r2, #1
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	f040 8148 	bne.w	800165e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d005      	beq.n	80013e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d130      	bne.n	8001448 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	2203      	movs	r2, #3
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800141c:	2201      	movs	r2, #1
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	091b      	lsrs	r3, r3, #4
 8001432:	f003 0201 	and.w	r2, r3, #1
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	2b03      	cmp	r3, #3
 8001452:	d017      	beq.n	8001484 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	2203      	movs	r2, #3
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d123      	bne.n	80014d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	08da      	lsrs	r2, r3, #3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3208      	adds	r2, #8
 8001498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	220f      	movs	r2, #15
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	691a      	ldr	r2, [r3, #16]
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	08da      	lsrs	r2, r3, #3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3208      	adds	r2, #8
 80014d2:	69b9      	ldr	r1, [r7, #24]
 80014d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f003 0203 	and.w	r2, r3, #3
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 80a2 	beq.w	800165e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b57      	ldr	r3, [pc, #348]	@ (800167c <HAL_GPIO_Init+0x2e8>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001522:	4a56      	ldr	r2, [pc, #344]	@ (800167c <HAL_GPIO_Init+0x2e8>)
 8001524:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001528:	6453      	str	r3, [r2, #68]	@ 0x44
 800152a:	4b54      	ldr	r3, [pc, #336]	@ (800167c <HAL_GPIO_Init+0x2e8>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001536:	4a52      	ldr	r2, [pc, #328]	@ (8001680 <HAL_GPIO_Init+0x2ec>)
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	089b      	lsrs	r3, r3, #2
 800153c:	3302      	adds	r3, #2
 800153e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001542:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	220f      	movs	r2, #15
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a49      	ldr	r2, [pc, #292]	@ (8001684 <HAL_GPIO_Init+0x2f0>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d019      	beq.n	8001596 <HAL_GPIO_Init+0x202>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a48      	ldr	r2, [pc, #288]	@ (8001688 <HAL_GPIO_Init+0x2f4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d013      	beq.n	8001592 <HAL_GPIO_Init+0x1fe>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a47      	ldr	r2, [pc, #284]	@ (800168c <HAL_GPIO_Init+0x2f8>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d00d      	beq.n	800158e <HAL_GPIO_Init+0x1fa>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a46      	ldr	r2, [pc, #280]	@ (8001690 <HAL_GPIO_Init+0x2fc>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d007      	beq.n	800158a <HAL_GPIO_Init+0x1f6>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a45      	ldr	r2, [pc, #276]	@ (8001694 <HAL_GPIO_Init+0x300>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d101      	bne.n	8001586 <HAL_GPIO_Init+0x1f2>
 8001582:	2304      	movs	r3, #4
 8001584:	e008      	b.n	8001598 <HAL_GPIO_Init+0x204>
 8001586:	2307      	movs	r3, #7
 8001588:	e006      	b.n	8001598 <HAL_GPIO_Init+0x204>
 800158a:	2303      	movs	r3, #3
 800158c:	e004      	b.n	8001598 <HAL_GPIO_Init+0x204>
 800158e:	2302      	movs	r3, #2
 8001590:	e002      	b.n	8001598 <HAL_GPIO_Init+0x204>
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <HAL_GPIO_Init+0x204>
 8001596:	2300      	movs	r3, #0
 8001598:	69fa      	ldr	r2, [r7, #28]
 800159a:	f002 0203 	and.w	r2, r2, #3
 800159e:	0092      	lsls	r2, r2, #2
 80015a0:	4093      	lsls	r3, r2
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015a8:	4935      	ldr	r1, [pc, #212]	@ (8001680 <HAL_GPIO_Init+0x2ec>)
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	089b      	lsrs	r3, r3, #2
 80015ae:	3302      	adds	r3, #2
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015b6:	4b38      	ldr	r3, [pc, #224]	@ (8001698 <HAL_GPIO_Init+0x304>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	43db      	mvns	r3, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4013      	ands	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015da:	4a2f      	ldr	r2, [pc, #188]	@ (8001698 <HAL_GPIO_Init+0x304>)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001698 <HAL_GPIO_Init+0x304>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001604:	4a24      	ldr	r2, [pc, #144]	@ (8001698 <HAL_GPIO_Init+0x304>)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800160a:	4b23      	ldr	r3, [pc, #140]	@ (8001698 <HAL_GPIO_Init+0x304>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800162e:	4a1a      	ldr	r2, [pc, #104]	@ (8001698 <HAL_GPIO_Init+0x304>)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001634:	4b18      	ldr	r3, [pc, #96]	@ (8001698 <HAL_GPIO_Init+0x304>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001658:	4a0f      	ldr	r2, [pc, #60]	@ (8001698 <HAL_GPIO_Init+0x304>)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3301      	adds	r3, #1
 8001662:	61fb      	str	r3, [r7, #28]
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	2b0f      	cmp	r3, #15
 8001668:	f67f aea2 	bls.w	80013b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3724      	adds	r7, #36	@ 0x24
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800
 8001680:	40013800 	.word	0x40013800
 8001684:	40020000 	.word	0x40020000
 8001688:	40020400 	.word	0x40020400
 800168c:	40020800 	.word	0x40020800
 8001690:	40020c00 	.word	0x40020c00
 8001694:	40021000 	.word	0x40021000
 8001698:	40013c00 	.word	0x40013c00

0800169c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691a      	ldr	r2, [r3, #16]
 80016ac:	887b      	ldrh	r3, [r7, #2]
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d002      	beq.n	80016ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016b4:	2301      	movs	r3, #1
 80016b6:	73fb      	strb	r3, [r7, #15]
 80016b8:	e001      	b.n	80016be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016be:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	807b      	strh	r3, [r7, #2]
 80016d8:	4613      	mov	r3, r2
 80016da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016dc:	787b      	ldrb	r3, [r7, #1]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016e2:	887a      	ldrh	r2, [r7, #2]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016e8:	e003      	b.n	80016f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ea:	887b      	ldrh	r3, [r7, #2]
 80016ec:	041a      	lsls	r2, r3, #16
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	619a      	str	r2, [r3, #24]
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e267      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d075      	beq.n	800180a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800171e:	4b88      	ldr	r3, [pc, #544]	@ (8001940 <HAL_RCC_OscConfig+0x240>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b04      	cmp	r3, #4
 8001728:	d00c      	beq.n	8001744 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800172a:	4b85      	ldr	r3, [pc, #532]	@ (8001940 <HAL_RCC_OscConfig+0x240>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001732:	2b08      	cmp	r3, #8
 8001734:	d112      	bne.n	800175c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001736:	4b82      	ldr	r3, [pc, #520]	@ (8001940 <HAL_RCC_OscConfig+0x240>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800173e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001742:	d10b      	bne.n	800175c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001744:	4b7e      	ldr	r3, [pc, #504]	@ (8001940 <HAL_RCC_OscConfig+0x240>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d05b      	beq.n	8001808 <HAL_RCC_OscConfig+0x108>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d157      	bne.n	8001808 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e242      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001764:	d106      	bne.n	8001774 <HAL_RCC_OscConfig+0x74>
 8001766:	4b76      	ldr	r3, [pc, #472]	@ (8001940 <HAL_RCC_OscConfig+0x240>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a75      	ldr	r2, [pc, #468]	@ (8001940 <HAL_RCC_OscConfig+0x240>)
 800176c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	e01d      	b.n	80017b0 <HAL_RCC_OscConfig+0xb0>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800177c:	d10c      	bne.n	8001798 <HAL_RCC_OscConfig+0x98>
 800177e:	4b70      	ldr	r3, [pc, #448]	@ (8001940 <HAL_RCC_OscConfig+0x240>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a6f      	ldr	r2, [pc, #444]	@ (8001940 <HAL_RCC_OscConfig+0x240>)
 8001784:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	4b6d      	ldr	r3, [pc, #436]	@ (8001940 <HAL_RCC_OscConfig+0x240>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a6c      	ldr	r2, [pc, #432]	@ (8001940 <HAL_RCC_OscConfig+0x240>)
 8001790:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	e00b      	b.n	80017b0 <HAL_RCC_OscConfig+0xb0>
 8001798:	4b69      	ldr	r3, [pc, #420]	@ (8001940 <HAL_RCC_OscConfig+0x240>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a68      	ldr	r2, [pc, #416]	@ (8001940 <HAL_RCC_OscConfig+0x240>)
 800179e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	4b66      	ldr	r3, [pc, #408]	@ (8001940 <HAL_RCC_OscConfig+0x240>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a65      	ldr	r2, [pc, #404]	@ (8001940 <HAL_RCC_OscConfig+0x240>)
 80017aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d013      	beq.n	80017e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b8:	f7ff fcaa 	bl	8001110 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c0:	f7ff fca6 	bl	8001110 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b64      	cmp	r3, #100	@ 0x64
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e207      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001940 <HAL_RCC_OscConfig+0x240>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0xc0>
 80017de:	e014      	b.n	800180a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7ff fc96 	bl	8001110 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e8:	f7ff fc92 	bl	8001110 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b64      	cmp	r3, #100	@ 0x64
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e1f3      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fa:	4b51      	ldr	r3, [pc, #324]	@ (8001940 <HAL_RCC_OscConfig+0x240>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0xe8>
 8001806:	e000      	b.n	800180a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d063      	beq.n	80018de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001816:	4b4a      	ldr	r3, [pc, #296]	@ (8001940 <HAL_RCC_OscConfig+0x240>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 030c 	and.w	r3, r3, #12
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00b      	beq.n	800183a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001822:	4b47      	ldr	r3, [pc, #284]	@ (8001940 <HAL_RCC_OscConfig+0x240>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800182a:	2b08      	cmp	r3, #8
 800182c:	d11c      	bne.n	8001868 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800182e:	4b44      	ldr	r3, [pc, #272]	@ (8001940 <HAL_RCC_OscConfig+0x240>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d116      	bne.n	8001868 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183a:	4b41      	ldr	r3, [pc, #260]	@ (8001940 <HAL_RCC_OscConfig+0x240>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d005      	beq.n	8001852 <HAL_RCC_OscConfig+0x152>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d001      	beq.n	8001852 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e1c7      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001852:	4b3b      	ldr	r3, [pc, #236]	@ (8001940 <HAL_RCC_OscConfig+0x240>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	4937      	ldr	r1, [pc, #220]	@ (8001940 <HAL_RCC_OscConfig+0x240>)
 8001862:	4313      	orrs	r3, r2
 8001864:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001866:	e03a      	b.n	80018de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d020      	beq.n	80018b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001870:	4b34      	ldr	r3, [pc, #208]	@ (8001944 <HAL_RCC_OscConfig+0x244>)
 8001872:	2201      	movs	r2, #1
 8001874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001876:	f7ff fc4b 	bl	8001110 <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800187e:	f7ff fc47 	bl	8001110 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e1a8      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001890:	4b2b      	ldr	r3, [pc, #172]	@ (8001940 <HAL_RCC_OscConfig+0x240>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0f0      	beq.n	800187e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189c:	4b28      	ldr	r3, [pc, #160]	@ (8001940 <HAL_RCC_OscConfig+0x240>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	4925      	ldr	r1, [pc, #148]	@ (8001940 <HAL_RCC_OscConfig+0x240>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	600b      	str	r3, [r1, #0]
 80018b0:	e015      	b.n	80018de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b2:	4b24      	ldr	r3, [pc, #144]	@ (8001944 <HAL_RCC_OscConfig+0x244>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b8:	f7ff fc2a 	bl	8001110 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c0:	f7ff fc26 	bl	8001110 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e187      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001940 <HAL_RCC_OscConfig+0x240>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d036      	beq.n	8001958 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d016      	beq.n	8001920 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f2:	4b15      	ldr	r3, [pc, #84]	@ (8001948 <HAL_RCC_OscConfig+0x248>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f8:	f7ff fc0a 	bl	8001110 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001900:	f7ff fc06 	bl	8001110 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e167      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001912:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <HAL_RCC_OscConfig+0x240>)
 8001914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0x200>
 800191e:	e01b      	b.n	8001958 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001920:	4b09      	ldr	r3, [pc, #36]	@ (8001948 <HAL_RCC_OscConfig+0x248>)
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001926:	f7ff fbf3 	bl	8001110 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800192c:	e00e      	b.n	800194c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800192e:	f7ff fbef 	bl	8001110 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d907      	bls.n	800194c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e150      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
 8001940:	40023800 	.word	0x40023800
 8001944:	42470000 	.word	0x42470000
 8001948:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800194c:	4b88      	ldr	r3, [pc, #544]	@ (8001b70 <HAL_RCC_OscConfig+0x470>)
 800194e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1ea      	bne.n	800192e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 8097 	beq.w	8001a94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001966:	2300      	movs	r3, #0
 8001968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800196a:	4b81      	ldr	r3, [pc, #516]	@ (8001b70 <HAL_RCC_OscConfig+0x470>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10f      	bne.n	8001996 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	4b7d      	ldr	r3, [pc, #500]	@ (8001b70 <HAL_RCC_OscConfig+0x470>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	4a7c      	ldr	r2, [pc, #496]	@ (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001980:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001984:	6413      	str	r3, [r2, #64]	@ 0x40
 8001986:	4b7a      	ldr	r3, [pc, #488]	@ (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001992:	2301      	movs	r3, #1
 8001994:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001996:	4b77      	ldr	r3, [pc, #476]	@ (8001b74 <HAL_RCC_OscConfig+0x474>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d118      	bne.n	80019d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019a2:	4b74      	ldr	r3, [pc, #464]	@ (8001b74 <HAL_RCC_OscConfig+0x474>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a73      	ldr	r2, [pc, #460]	@ (8001b74 <HAL_RCC_OscConfig+0x474>)
 80019a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ae:	f7ff fbaf 	bl	8001110 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019b6:	f7ff fbab 	bl	8001110 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e10c      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c8:	4b6a      	ldr	r3, [pc, #424]	@ (8001b74 <HAL_RCC_OscConfig+0x474>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0f0      	beq.n	80019b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d106      	bne.n	80019ea <HAL_RCC_OscConfig+0x2ea>
 80019dc:	4b64      	ldr	r3, [pc, #400]	@ (8001b70 <HAL_RCC_OscConfig+0x470>)
 80019de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019e0:	4a63      	ldr	r2, [pc, #396]	@ (8001b70 <HAL_RCC_OscConfig+0x470>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80019e8:	e01c      	b.n	8001a24 <HAL_RCC_OscConfig+0x324>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b05      	cmp	r3, #5
 80019f0:	d10c      	bne.n	8001a0c <HAL_RCC_OscConfig+0x30c>
 80019f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001b70 <HAL_RCC_OscConfig+0x470>)
 80019f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019f6:	4a5e      	ldr	r2, [pc, #376]	@ (8001b70 <HAL_RCC_OscConfig+0x470>)
 80019f8:	f043 0304 	orr.w	r3, r3, #4
 80019fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80019fe:	4b5c      	ldr	r3, [pc, #368]	@ (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a02:	4a5b      	ldr	r2, [pc, #364]	@ (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a0a:	e00b      	b.n	8001a24 <HAL_RCC_OscConfig+0x324>
 8001a0c:	4b58      	ldr	r3, [pc, #352]	@ (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a10:	4a57      	ldr	r2, [pc, #348]	@ (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001a12:	f023 0301 	bic.w	r3, r3, #1
 8001a16:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a18:	4b55      	ldr	r3, [pc, #340]	@ (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a1c:	4a54      	ldr	r2, [pc, #336]	@ (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001a1e:	f023 0304 	bic.w	r3, r3, #4
 8001a22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d015      	beq.n	8001a58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2c:	f7ff fb70 	bl	8001110 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a32:	e00a      	b.n	8001a4a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a34:	f7ff fb6c 	bl	8001110 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e0cb      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4a:	4b49      	ldr	r3, [pc, #292]	@ (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0ee      	beq.n	8001a34 <HAL_RCC_OscConfig+0x334>
 8001a56:	e014      	b.n	8001a82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a58:	f7ff fb5a 	bl	8001110 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a5e:	e00a      	b.n	8001a76 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a60:	f7ff fb56 	bl	8001110 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e0b5      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a76:	4b3e      	ldr	r3, [pc, #248]	@ (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1ee      	bne.n	8001a60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a82:	7dfb      	ldrb	r3, [r7, #23]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d105      	bne.n	8001a94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a88:	4b39      	ldr	r3, [pc, #228]	@ (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8c:	4a38      	ldr	r2, [pc, #224]	@ (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001a8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 80a1 	beq.w	8001be0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a9e:	4b34      	ldr	r3, [pc, #208]	@ (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	2b08      	cmp	r3, #8
 8001aa8:	d05c      	beq.n	8001b64 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d141      	bne.n	8001b36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab2:	4b31      	ldr	r3, [pc, #196]	@ (8001b78 <HAL_RCC_OscConfig+0x478>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab8:	f7ff fb2a 	bl	8001110 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac0:	f7ff fb26 	bl	8001110 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e087      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad2:	4b27      	ldr	r3, [pc, #156]	@ (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f0      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69da      	ldr	r2, [r3, #28]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aec:	019b      	lsls	r3, r3, #6
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af4:	085b      	lsrs	r3, r3, #1
 8001af6:	3b01      	subs	r3, #1
 8001af8:	041b      	lsls	r3, r3, #16
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b00:	061b      	lsls	r3, r3, #24
 8001b02:	491b      	ldr	r1, [pc, #108]	@ (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b08:	4b1b      	ldr	r3, [pc, #108]	@ (8001b78 <HAL_RCC_OscConfig+0x478>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0e:	f7ff faff 	bl	8001110 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b16:	f7ff fafb 	bl	8001110 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e05c      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b28:	4b11      	ldr	r3, [pc, #68]	@ (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0f0      	beq.n	8001b16 <HAL_RCC_OscConfig+0x416>
 8001b34:	e054      	b.n	8001be0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b36:	4b10      	ldr	r3, [pc, #64]	@ (8001b78 <HAL_RCC_OscConfig+0x478>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7ff fae8 	bl	8001110 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b44:	f7ff fae4 	bl	8001110 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e045      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b56:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f0      	bne.n	8001b44 <HAL_RCC_OscConfig+0x444>
 8001b62:	e03d      	b.n	8001be0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d107      	bne.n	8001b7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e038      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40007000 	.word	0x40007000
 8001b78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bec <HAL_RCC_OscConfig+0x4ec>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d028      	beq.n	8001bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d121      	bne.n	8001bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d11a      	bne.n	8001bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001bac:	4013      	ands	r3, r2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d111      	bne.n	8001bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc2:	085b      	lsrs	r3, r3, #1
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d107      	bne.n	8001bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d001      	beq.n	8001be0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40023800 	.word	0x40023800

08001bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0cc      	b.n	8001d9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c04:	4b68      	ldr	r3, [pc, #416]	@ (8001da8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d90c      	bls.n	8001c2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c12:	4b65      	ldr	r3, [pc, #404]	@ (8001da8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1a:	4b63      	ldr	r3, [pc, #396]	@ (8001da8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d001      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e0b8      	b.n	8001d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d020      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d005      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c44:	4b59      	ldr	r3, [pc, #356]	@ (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	4a58      	ldr	r2, [pc, #352]	@ (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d005      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c5c:	4b53      	ldr	r3, [pc, #332]	@ (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	4a52      	ldr	r2, [pc, #328]	@ (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c68:	4b50      	ldr	r3, [pc, #320]	@ (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	494d      	ldr	r1, [pc, #308]	@ (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d044      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d107      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8e:	4b47      	ldr	r3, [pc, #284]	@ (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d119      	bne.n	8001cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e07f      	b.n	8001d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d003      	beq.n	8001cae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001caa:	2b03      	cmp	r3, #3
 8001cac:	d107      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cae:	4b3f      	ldr	r3, [pc, #252]	@ (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d109      	bne.n	8001cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e06f      	b.n	8001d9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbe:	4b3b      	ldr	r3, [pc, #236]	@ (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e067      	b.n	8001d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cce:	4b37      	ldr	r3, [pc, #220]	@ (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f023 0203 	bic.w	r2, r3, #3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	4934      	ldr	r1, [pc, #208]	@ (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ce0:	f7ff fa16 	bl	8001110 <HAL_GetTick>
 8001ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce6:	e00a      	b.n	8001cfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce8:	f7ff fa12 	bl	8001110 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e04f      	b.n	8001d9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfe:	4b2b      	ldr	r3, [pc, #172]	@ (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 020c 	and.w	r2, r3, #12
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d1eb      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d10:	4b25      	ldr	r3, [pc, #148]	@ (8001da8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d20c      	bcs.n	8001d38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1e:	4b22      	ldr	r3, [pc, #136]	@ (8001da8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d26:	4b20      	ldr	r3, [pc, #128]	@ (8001da8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d001      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e032      	b.n	8001d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d008      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d44:	4b19      	ldr	r3, [pc, #100]	@ (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	4916      	ldr	r1, [pc, #88]	@ (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d009      	beq.n	8001d76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d62:	4b12      	ldr	r3, [pc, #72]	@ (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	490e      	ldr	r1, [pc, #56]	@ (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d76:	f000 f821 	bl	8001dbc <HAL_RCC_GetSysClockFreq>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	091b      	lsrs	r3, r3, #4
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	490a      	ldr	r1, [pc, #40]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d88:	5ccb      	ldrb	r3, [r1, r3]
 8001d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8e:	4a09      	ldr	r2, [pc, #36]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001d92:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff f976 	bl	8001088 <HAL_InitTick>

  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40023c00 	.word	0x40023c00
 8001dac:	40023800 	.word	0x40023800
 8001db0:	08003634 	.word	0x08003634
 8001db4:	20000000 	.word	0x20000000
 8001db8:	20000004 	.word	0x20000004

08001dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dc0:	b094      	sub	sp, #80	@ 0x50
 8001dc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dd4:	4b79      	ldr	r3, [pc, #484]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 030c 	and.w	r3, r3, #12
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d00d      	beq.n	8001dfc <HAL_RCC_GetSysClockFreq+0x40>
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	f200 80e1 	bhi.w	8001fa8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d002      	beq.n	8001df0 <HAL_RCC_GetSysClockFreq+0x34>
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d003      	beq.n	8001df6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dee:	e0db      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001df0:	4b73      	ldr	r3, [pc, #460]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001df2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001df4:	e0db      	b.n	8001fae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001df6:	4b73      	ldr	r3, [pc, #460]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001df8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001dfa:	e0d8      	b.n	8001fae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dfc:	4b6f      	ldr	r3, [pc, #444]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e04:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e06:	4b6d      	ldr	r3, [pc, #436]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d063      	beq.n	8001eda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e12:	4b6a      	ldr	r3, [pc, #424]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	099b      	lsrs	r3, r3, #6
 8001e18:	2200      	movs	r2, #0
 8001e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e24:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e26:	2300      	movs	r3, #0
 8001e28:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e2e:	4622      	mov	r2, r4
 8001e30:	462b      	mov	r3, r5
 8001e32:	f04f 0000 	mov.w	r0, #0
 8001e36:	f04f 0100 	mov.w	r1, #0
 8001e3a:	0159      	lsls	r1, r3, #5
 8001e3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e40:	0150      	lsls	r0, r2, #5
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4621      	mov	r1, r4
 8001e48:	1a51      	subs	r1, r2, r1
 8001e4a:	6139      	str	r1, [r7, #16]
 8001e4c:	4629      	mov	r1, r5
 8001e4e:	eb63 0301 	sbc.w	r3, r3, r1
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	f04f 0300 	mov.w	r3, #0
 8001e5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e60:	4659      	mov	r1, fp
 8001e62:	018b      	lsls	r3, r1, #6
 8001e64:	4651      	mov	r1, sl
 8001e66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e6a:	4651      	mov	r1, sl
 8001e6c:	018a      	lsls	r2, r1, #6
 8001e6e:	4651      	mov	r1, sl
 8001e70:	ebb2 0801 	subs.w	r8, r2, r1
 8001e74:	4659      	mov	r1, fp
 8001e76:	eb63 0901 	sbc.w	r9, r3, r1
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	f04f 0300 	mov.w	r3, #0
 8001e82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e8e:	4690      	mov	r8, r2
 8001e90:	4699      	mov	r9, r3
 8001e92:	4623      	mov	r3, r4
 8001e94:	eb18 0303 	adds.w	r3, r8, r3
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	462b      	mov	r3, r5
 8001e9c:	eb49 0303 	adc.w	r3, r9, r3
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	f04f 0300 	mov.w	r3, #0
 8001eaa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001eae:	4629      	mov	r1, r5
 8001eb0:	024b      	lsls	r3, r1, #9
 8001eb2:	4621      	mov	r1, r4
 8001eb4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001eb8:	4621      	mov	r1, r4
 8001eba:	024a      	lsls	r2, r1, #9
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ec6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ec8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ecc:	f7fe f982 	bl	80001d4 <__aeabi_uldivmod>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ed8:	e058      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eda:	4b38      	ldr	r3, [pc, #224]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	099b      	lsrs	r3, r3, #6
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	4611      	mov	r1, r2
 8001ee6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001eea:	623b      	str	r3, [r7, #32]
 8001eec:	2300      	movs	r3, #0
 8001eee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ef0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ef4:	4642      	mov	r2, r8
 8001ef6:	464b      	mov	r3, r9
 8001ef8:	f04f 0000 	mov.w	r0, #0
 8001efc:	f04f 0100 	mov.w	r1, #0
 8001f00:	0159      	lsls	r1, r3, #5
 8001f02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f06:	0150      	lsls	r0, r2, #5
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4641      	mov	r1, r8
 8001f0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f12:	4649      	mov	r1, r9
 8001f14:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f2c:	ebb2 040a 	subs.w	r4, r2, sl
 8001f30:	eb63 050b 	sbc.w	r5, r3, fp
 8001f34:	f04f 0200 	mov.w	r2, #0
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	00eb      	lsls	r3, r5, #3
 8001f3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f42:	00e2      	lsls	r2, r4, #3
 8001f44:	4614      	mov	r4, r2
 8001f46:	461d      	mov	r5, r3
 8001f48:	4643      	mov	r3, r8
 8001f4a:	18e3      	adds	r3, r4, r3
 8001f4c:	603b      	str	r3, [r7, #0]
 8001f4e:	464b      	mov	r3, r9
 8001f50:	eb45 0303 	adc.w	r3, r5, r3
 8001f54:	607b      	str	r3, [r7, #4]
 8001f56:	f04f 0200 	mov.w	r2, #0
 8001f5a:	f04f 0300 	mov.w	r3, #0
 8001f5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f62:	4629      	mov	r1, r5
 8001f64:	028b      	lsls	r3, r1, #10
 8001f66:	4621      	mov	r1, r4
 8001f68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f6c:	4621      	mov	r1, r4
 8001f6e:	028a      	lsls	r2, r1, #10
 8001f70:	4610      	mov	r0, r2
 8001f72:	4619      	mov	r1, r3
 8001f74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f76:	2200      	movs	r2, #0
 8001f78:	61bb      	str	r3, [r7, #24]
 8001f7a:	61fa      	str	r2, [r7, #28]
 8001f7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f80:	f7fe f928 	bl	80001d4 <__aeabi_uldivmod>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	4613      	mov	r3, r2
 8001f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	0c1b      	lsrs	r3, r3, #16
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	3301      	adds	r3, #1
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001f9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fa6:	e002      	b.n	8001fae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fa8:	4b05      	ldr	r3, [pc, #20]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001faa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3750      	adds	r7, #80	@ 0x50
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fba:	bf00      	nop
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	00f42400 	.word	0x00f42400
 8001fc4:	007a1200 	.word	0x007a1200

08001fc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fcc:	4b03      	ldr	r3, [pc, #12]	@ (8001fdc <HAL_RCC_GetHCLKFreq+0x14>)
 8001fce:	681b      	ldr	r3, [r3, #0]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	20000000 	.word	0x20000000

08001fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fe4:	f7ff fff0 	bl	8001fc8 <HAL_RCC_GetHCLKFreq>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	4b05      	ldr	r3, [pc, #20]	@ (8002000 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	0a9b      	lsrs	r3, r3, #10
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	4903      	ldr	r1, [pc, #12]	@ (8002004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ff6:	5ccb      	ldrb	r3, [r1, r3]
 8001ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40023800 	.word	0x40023800
 8002004:	08003644 	.word	0x08003644

08002008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800200c:	f7ff ffdc 	bl	8001fc8 <HAL_RCC_GetHCLKFreq>
 8002010:	4602      	mov	r2, r0
 8002012:	4b05      	ldr	r3, [pc, #20]	@ (8002028 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	0b5b      	lsrs	r3, r3, #13
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	4903      	ldr	r1, [pc, #12]	@ (800202c <HAL_RCC_GetPCLK2Freq+0x24>)
 800201e:	5ccb      	ldrb	r3, [r1, r3]
 8002020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002024:	4618      	mov	r0, r3
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40023800 	.word	0x40023800
 800202c:	08003644 	.word	0x08003644

08002030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e041      	b.n	80020c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d106      	bne.n	800205c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7fe ff00 	bl	8000e5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2202      	movs	r2, #2
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3304      	adds	r3, #4
 800206c:	4619      	mov	r1, r3
 800206e:	4610      	mov	r0, r2
 8002070:	f000 fc8a 	bl	8002988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e041      	b.n	8002164 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d106      	bne.n	80020fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f839 	bl	800216c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2202      	movs	r2, #2
 80020fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3304      	adds	r3, #4
 800210a:	4619      	mov	r1, r3
 800210c:	4610      	mov	r0, r2
 800210e:	f000 fc3b 	bl	8002988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2200      	movs	r2, #0
 8002190:	6839      	ldr	r1, [r7, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f000 feaa 	bl	8002eec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a29      	ldr	r2, [pc, #164]	@ (8002244 <HAL_TIM_PWM_Stop+0xc4>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d117      	bne.n	80021d2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6a1a      	ldr	r2, [r3, #32]
 80021a8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10f      	bne.n	80021d2 <HAL_TIM_PWM_Stop+0x52>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6a1a      	ldr	r2, [r3, #32]
 80021b8:	f240 4344 	movw	r3, #1092	@ 0x444
 80021bc:	4013      	ands	r3, r2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d107      	bne.n	80021d2 <HAL_TIM_PWM_Stop+0x52>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6a1a      	ldr	r2, [r3, #32]
 80021d8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80021dc:	4013      	ands	r3, r2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10f      	bne.n	8002202 <HAL_TIM_PWM_Stop+0x82>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6a1a      	ldr	r2, [r3, #32]
 80021e8:	f240 4344 	movw	r3, #1092	@ 0x444
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d107      	bne.n	8002202 <HAL_TIM_PWM_Stop+0x82>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0201 	bic.w	r2, r2, #1
 8002200:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d104      	bne.n	8002212 <HAL_TIM_PWM_Stop+0x92>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002210:	e013      	b.n	800223a <HAL_TIM_PWM_Stop+0xba>
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	2b04      	cmp	r3, #4
 8002216:	d104      	bne.n	8002222 <HAL_TIM_PWM_Stop+0xa2>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002220:	e00b      	b.n	800223a <HAL_TIM_PWM_Stop+0xba>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	2b08      	cmp	r3, #8
 8002226:	d104      	bne.n	8002232 <HAL_TIM_PWM_Stop+0xb2>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002230:	e003      	b.n	800223a <HAL_TIM_PWM_Stop+0xba>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40010000 	.word	0x40010000

08002248 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d109      	bne.n	8002270 <HAL_TIM_PWM_Start_IT+0x28>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b01      	cmp	r3, #1
 8002266:	bf14      	ite	ne
 8002268:	2301      	movne	r3, #1
 800226a:	2300      	moveq	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	e022      	b.n	80022b6 <HAL_TIM_PWM_Start_IT+0x6e>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	2b04      	cmp	r3, #4
 8002274:	d109      	bne.n	800228a <HAL_TIM_PWM_Start_IT+0x42>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b01      	cmp	r3, #1
 8002280:	bf14      	ite	ne
 8002282:	2301      	movne	r3, #1
 8002284:	2300      	moveq	r3, #0
 8002286:	b2db      	uxtb	r3, r3
 8002288:	e015      	b.n	80022b6 <HAL_TIM_PWM_Start_IT+0x6e>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	2b08      	cmp	r3, #8
 800228e:	d109      	bne.n	80022a4 <HAL_TIM_PWM_Start_IT+0x5c>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b01      	cmp	r3, #1
 800229a:	bf14      	ite	ne
 800229c:	2301      	movne	r3, #1
 800229e:	2300      	moveq	r3, #0
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	e008      	b.n	80022b6 <HAL_TIM_PWM_Start_IT+0x6e>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	bf14      	ite	ne
 80022b0:	2301      	movne	r3, #1
 80022b2:	2300      	moveq	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e0b3      	b.n	8002426 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d104      	bne.n	80022ce <HAL_TIM_PWM_Start_IT+0x86>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2202      	movs	r2, #2
 80022c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022cc:	e013      	b.n	80022f6 <HAL_TIM_PWM_Start_IT+0xae>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d104      	bne.n	80022de <HAL_TIM_PWM_Start_IT+0x96>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2202      	movs	r2, #2
 80022d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022dc:	e00b      	b.n	80022f6 <HAL_TIM_PWM_Start_IT+0xae>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d104      	bne.n	80022ee <HAL_TIM_PWM_Start_IT+0xa6>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022ec:	e003      	b.n	80022f6 <HAL_TIM_PWM_Start_IT+0xae>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2202      	movs	r2, #2
 80022f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	2b0c      	cmp	r3, #12
 80022fa:	d841      	bhi.n	8002380 <HAL_TIM_PWM_Start_IT+0x138>
 80022fc:	a201      	add	r2, pc, #4	@ (adr r2, 8002304 <HAL_TIM_PWM_Start_IT+0xbc>)
 80022fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002302:	bf00      	nop
 8002304:	08002339 	.word	0x08002339
 8002308:	08002381 	.word	0x08002381
 800230c:	08002381 	.word	0x08002381
 8002310:	08002381 	.word	0x08002381
 8002314:	0800234b 	.word	0x0800234b
 8002318:	08002381 	.word	0x08002381
 800231c:	08002381 	.word	0x08002381
 8002320:	08002381 	.word	0x08002381
 8002324:	0800235d 	.word	0x0800235d
 8002328:	08002381 	.word	0x08002381
 800232c:	08002381 	.word	0x08002381
 8002330:	08002381 	.word	0x08002381
 8002334:	0800236f 	.word	0x0800236f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0202 	orr.w	r2, r2, #2
 8002346:	60da      	str	r2, [r3, #12]
      break;
 8002348:	e01d      	b.n	8002386 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68da      	ldr	r2, [r3, #12]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f042 0204 	orr.w	r2, r2, #4
 8002358:	60da      	str	r2, [r3, #12]
      break;
 800235a:	e014      	b.n	8002386 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0208 	orr.w	r2, r2, #8
 800236a:	60da      	str	r2, [r3, #12]
      break;
 800236c:	e00b      	b.n	8002386 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f042 0210 	orr.w	r2, r2, #16
 800237c:	60da      	str	r2, [r3, #12]
      break;
 800237e:	e002      	b.n	8002386 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	73fb      	strb	r3, [r7, #15]
      break;
 8002384:	bf00      	nop
  }

  if (status == HAL_OK)
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d14b      	bne.n	8002424 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2201      	movs	r2, #1
 8002392:	6839      	ldr	r1, [r7, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f000 fda9 	bl	8002eec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a24      	ldr	r2, [pc, #144]	@ (8002430 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d107      	bne.n	80023b4 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023b2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002430 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d018      	beq.n	80023f0 <HAL_TIM_PWM_Start_IT+0x1a8>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023c6:	d013      	beq.n	80023f0 <HAL_TIM_PWM_Start_IT+0x1a8>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a19      	ldr	r2, [pc, #100]	@ (8002434 <HAL_TIM_PWM_Start_IT+0x1ec>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d00e      	beq.n	80023f0 <HAL_TIM_PWM_Start_IT+0x1a8>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a18      	ldr	r2, [pc, #96]	@ (8002438 <HAL_TIM_PWM_Start_IT+0x1f0>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d009      	beq.n	80023f0 <HAL_TIM_PWM_Start_IT+0x1a8>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a16      	ldr	r2, [pc, #88]	@ (800243c <HAL_TIM_PWM_Start_IT+0x1f4>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d004      	beq.n	80023f0 <HAL_TIM_PWM_Start_IT+0x1a8>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a15      	ldr	r2, [pc, #84]	@ (8002440 <HAL_TIM_PWM_Start_IT+0x1f8>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d111      	bne.n	8002414 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2b06      	cmp	r3, #6
 8002400:	d010      	beq.n	8002424 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f042 0201 	orr.w	r2, r2, #1
 8002410:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002412:	e007      	b.n	8002424 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002424:	7bfb      	ldrb	r3, [r7, #15]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40010000 	.word	0x40010000
 8002434:	40000400 	.word	0x40000400
 8002438:	40000800 	.word	0x40000800
 800243c:	40000c00 	.word	0x40000c00
 8002440:	40014000 	.word	0x40014000

08002444 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d020      	beq.n	80024a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d01b      	beq.n	80024a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f06f 0202 	mvn.w	r2, #2
 8002478:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 fa65 	bl	800295e <HAL_TIM_IC_CaptureCallback>
 8002494:	e005      	b.n	80024a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fa57 	bl	800294a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7fe f953 	bl	8000748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d020      	beq.n	80024f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d01b      	beq.n	80024f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f06f 0204 	mvn.w	r2, #4
 80024c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2202      	movs	r2, #2
 80024ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 fa3f 	bl	800295e <HAL_TIM_IC_CaptureCallback>
 80024e0:	e005      	b.n	80024ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 fa31 	bl	800294a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7fe f92d 	bl	8000748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d020      	beq.n	8002540 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b00      	cmp	r3, #0
 8002506:	d01b      	beq.n	8002540 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f06f 0208 	mvn.w	r2, #8
 8002510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2204      	movs	r2, #4
 8002516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 fa19 	bl	800295e <HAL_TIM_IC_CaptureCallback>
 800252c:	e005      	b.n	800253a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 fa0b 	bl	800294a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7fe f907 	bl	8000748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	f003 0310 	and.w	r3, r3, #16
 8002546:	2b00      	cmp	r3, #0
 8002548:	d020      	beq.n	800258c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	2b00      	cmp	r3, #0
 8002552:	d01b      	beq.n	800258c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f06f 0210 	mvn.w	r2, #16
 800255c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2208      	movs	r2, #8
 8002562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f9f3 	bl	800295e <HAL_TIM_IC_CaptureCallback>
 8002578:	e005      	b.n	8002586 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f9e5 	bl	800294a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7fe f8e1 	bl	8000748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00c      	beq.n	80025b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	d007      	beq.n	80025b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f06f 0201 	mvn.w	r2, #1
 80025a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f9c3 	bl	8002936 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00c      	beq.n	80025d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d007      	beq.n	80025d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80025cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 fd2a 	bl	8003028 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00c      	beq.n	80025f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d007      	beq.n	80025f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80025f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f9bd 	bl	8002972 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	f003 0320 	and.w	r3, r3, #32
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00c      	beq.n	800261c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b00      	cmp	r3, #0
 800260a:	d007      	beq.n	800261c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f06f 0220 	mvn.w	r2, #32
 8002614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 fcfc 	bl	8003014 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800261c:	bf00      	nop
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800263e:	2302      	movs	r3, #2
 8002640:	e0ae      	b.n	80027a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b0c      	cmp	r3, #12
 800264e:	f200 809f 	bhi.w	8002790 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002652:	a201      	add	r2, pc, #4	@ (adr r2, 8002658 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002658:	0800268d 	.word	0x0800268d
 800265c:	08002791 	.word	0x08002791
 8002660:	08002791 	.word	0x08002791
 8002664:	08002791 	.word	0x08002791
 8002668:	080026cd 	.word	0x080026cd
 800266c:	08002791 	.word	0x08002791
 8002670:	08002791 	.word	0x08002791
 8002674:	08002791 	.word	0x08002791
 8002678:	0800270f 	.word	0x0800270f
 800267c:	08002791 	.word	0x08002791
 8002680:	08002791 	.word	0x08002791
 8002684:	08002791 	.word	0x08002791
 8002688:	0800274f 	.word	0x0800274f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68b9      	ldr	r1, [r7, #8]
 8002692:	4618      	mov	r0, r3
 8002694:	f000 fa04 	bl	8002aa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699a      	ldr	r2, [r3, #24]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0208 	orr.w	r2, r2, #8
 80026a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699a      	ldr	r2, [r3, #24]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0204 	bic.w	r2, r2, #4
 80026b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6999      	ldr	r1, [r3, #24]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	691a      	ldr	r2, [r3, #16]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	619a      	str	r2, [r3, #24]
      break;
 80026ca:	e064      	b.n	8002796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68b9      	ldr	r1, [r7, #8]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 fa4a 	bl	8002b6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699a      	ldr	r2, [r3, #24]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699a      	ldr	r2, [r3, #24]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6999      	ldr	r1, [r3, #24]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	021a      	lsls	r2, r3, #8
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	619a      	str	r2, [r3, #24]
      break;
 800270c:	e043      	b.n	8002796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68b9      	ldr	r1, [r7, #8]
 8002714:	4618      	mov	r0, r3
 8002716:	f000 fa95 	bl	8002c44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	69da      	ldr	r2, [r3, #28]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f042 0208 	orr.w	r2, r2, #8
 8002728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	69da      	ldr	r2, [r3, #28]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0204 	bic.w	r2, r2, #4
 8002738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	69d9      	ldr	r1, [r3, #28]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	61da      	str	r2, [r3, #28]
      break;
 800274c:	e023      	b.n	8002796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68b9      	ldr	r1, [r7, #8]
 8002754:	4618      	mov	r0, r3
 8002756:	f000 fadf 	bl	8002d18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	69da      	ldr	r2, [r3, #28]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	69da      	ldr	r2, [r3, #28]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	69d9      	ldr	r1, [r3, #28]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	021a      	lsls	r2, r3, #8
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	61da      	str	r2, [r3, #28]
      break;
 800278e:	e002      	b.n	8002796 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	75fb      	strb	r3, [r7, #23]
      break;
 8002794:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800279e:	7dfb      	ldrb	r3, [r7, #23]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <HAL_TIM_ConfigClockSource+0x1c>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e0b4      	b.n	800292e <HAL_TIM_ConfigClockSource+0x186>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80027e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027fc:	d03e      	beq.n	800287c <HAL_TIM_ConfigClockSource+0xd4>
 80027fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002802:	f200 8087 	bhi.w	8002914 <HAL_TIM_ConfigClockSource+0x16c>
 8002806:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800280a:	f000 8086 	beq.w	800291a <HAL_TIM_ConfigClockSource+0x172>
 800280e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002812:	d87f      	bhi.n	8002914 <HAL_TIM_ConfigClockSource+0x16c>
 8002814:	2b70      	cmp	r3, #112	@ 0x70
 8002816:	d01a      	beq.n	800284e <HAL_TIM_ConfigClockSource+0xa6>
 8002818:	2b70      	cmp	r3, #112	@ 0x70
 800281a:	d87b      	bhi.n	8002914 <HAL_TIM_ConfigClockSource+0x16c>
 800281c:	2b60      	cmp	r3, #96	@ 0x60
 800281e:	d050      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0x11a>
 8002820:	2b60      	cmp	r3, #96	@ 0x60
 8002822:	d877      	bhi.n	8002914 <HAL_TIM_ConfigClockSource+0x16c>
 8002824:	2b50      	cmp	r3, #80	@ 0x50
 8002826:	d03c      	beq.n	80028a2 <HAL_TIM_ConfigClockSource+0xfa>
 8002828:	2b50      	cmp	r3, #80	@ 0x50
 800282a:	d873      	bhi.n	8002914 <HAL_TIM_ConfigClockSource+0x16c>
 800282c:	2b40      	cmp	r3, #64	@ 0x40
 800282e:	d058      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0x13a>
 8002830:	2b40      	cmp	r3, #64	@ 0x40
 8002832:	d86f      	bhi.n	8002914 <HAL_TIM_ConfigClockSource+0x16c>
 8002834:	2b30      	cmp	r3, #48	@ 0x30
 8002836:	d064      	beq.n	8002902 <HAL_TIM_ConfigClockSource+0x15a>
 8002838:	2b30      	cmp	r3, #48	@ 0x30
 800283a:	d86b      	bhi.n	8002914 <HAL_TIM_ConfigClockSource+0x16c>
 800283c:	2b20      	cmp	r3, #32
 800283e:	d060      	beq.n	8002902 <HAL_TIM_ConfigClockSource+0x15a>
 8002840:	2b20      	cmp	r3, #32
 8002842:	d867      	bhi.n	8002914 <HAL_TIM_ConfigClockSource+0x16c>
 8002844:	2b00      	cmp	r3, #0
 8002846:	d05c      	beq.n	8002902 <HAL_TIM_ConfigClockSource+0x15a>
 8002848:	2b10      	cmp	r3, #16
 800284a:	d05a      	beq.n	8002902 <HAL_TIM_ConfigClockSource+0x15a>
 800284c:	e062      	b.n	8002914 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800285e:	f000 fb25 	bl	8002eac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002870:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	609a      	str	r2, [r3, #8]
      break;
 800287a:	e04f      	b.n	800291c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800288c:	f000 fb0e 	bl	8002eac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800289e:	609a      	str	r2, [r3, #8]
      break;
 80028a0:	e03c      	b.n	800291c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ae:	461a      	mov	r2, r3
 80028b0:	f000 fa82 	bl	8002db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2150      	movs	r1, #80	@ 0x50
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 fadb 	bl	8002e76 <TIM_ITRx_SetConfig>
      break;
 80028c0:	e02c      	b.n	800291c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ce:	461a      	mov	r2, r3
 80028d0:	f000 faa1 	bl	8002e16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2160      	movs	r1, #96	@ 0x60
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 facb 	bl	8002e76 <TIM_ITRx_SetConfig>
      break;
 80028e0:	e01c      	b.n	800291c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ee:	461a      	mov	r2, r3
 80028f0:	f000 fa62 	bl	8002db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2140      	movs	r1, #64	@ 0x40
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 fabb 	bl	8002e76 <TIM_ITRx_SetConfig>
      break;
 8002900:	e00c      	b.n	800291c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4619      	mov	r1, r3
 800290c:	4610      	mov	r0, r2
 800290e:	f000 fab2 	bl	8002e76 <TIM_ITRx_SetConfig>
      break;
 8002912:	e003      	b.n	800291c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	73fb      	strb	r3, [r7, #15]
      break;
 8002918:	e000      	b.n	800291c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800291a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800292c:	7bfb      	ldrb	r3, [r7, #15]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a3a      	ldr	r2, [pc, #232]	@ (8002a84 <TIM_Base_SetConfig+0xfc>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d00f      	beq.n	80029c0 <TIM_Base_SetConfig+0x38>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029a6:	d00b      	beq.n	80029c0 <TIM_Base_SetConfig+0x38>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a37      	ldr	r2, [pc, #220]	@ (8002a88 <TIM_Base_SetConfig+0x100>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d007      	beq.n	80029c0 <TIM_Base_SetConfig+0x38>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a36      	ldr	r2, [pc, #216]	@ (8002a8c <TIM_Base_SetConfig+0x104>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d003      	beq.n	80029c0 <TIM_Base_SetConfig+0x38>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a35      	ldr	r2, [pc, #212]	@ (8002a90 <TIM_Base_SetConfig+0x108>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d108      	bne.n	80029d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002a84 <TIM_Base_SetConfig+0xfc>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d01b      	beq.n	8002a12 <TIM_Base_SetConfig+0x8a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029e0:	d017      	beq.n	8002a12 <TIM_Base_SetConfig+0x8a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a28      	ldr	r2, [pc, #160]	@ (8002a88 <TIM_Base_SetConfig+0x100>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d013      	beq.n	8002a12 <TIM_Base_SetConfig+0x8a>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a27      	ldr	r2, [pc, #156]	@ (8002a8c <TIM_Base_SetConfig+0x104>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d00f      	beq.n	8002a12 <TIM_Base_SetConfig+0x8a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a26      	ldr	r2, [pc, #152]	@ (8002a90 <TIM_Base_SetConfig+0x108>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d00b      	beq.n	8002a12 <TIM_Base_SetConfig+0x8a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a25      	ldr	r2, [pc, #148]	@ (8002a94 <TIM_Base_SetConfig+0x10c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d007      	beq.n	8002a12 <TIM_Base_SetConfig+0x8a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a24      	ldr	r2, [pc, #144]	@ (8002a98 <TIM_Base_SetConfig+0x110>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d003      	beq.n	8002a12 <TIM_Base_SetConfig+0x8a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a23      	ldr	r2, [pc, #140]	@ (8002a9c <TIM_Base_SetConfig+0x114>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d108      	bne.n	8002a24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a0e      	ldr	r2, [pc, #56]	@ (8002a84 <TIM_Base_SetConfig+0xfc>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d103      	bne.n	8002a58 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	691a      	ldr	r2, [r3, #16]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d105      	bne.n	8002a76 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	f023 0201 	bic.w	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	611a      	str	r2, [r3, #16]
  }
}
 8002a76:	bf00      	nop
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	40010000 	.word	0x40010000
 8002a88:	40000400 	.word	0x40000400
 8002a8c:	40000800 	.word	0x40000800
 8002a90:	40000c00 	.word	0x40000c00
 8002a94:	40014000 	.word	0x40014000
 8002a98:	40014400 	.word	0x40014400
 8002a9c:	40014800 	.word	0x40014800

08002aa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	f023 0201 	bic.w	r2, r3, #1
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f023 0303 	bic.w	r3, r3, #3
 8002ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f023 0302 	bic.w	r3, r3, #2
 8002ae8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a1c      	ldr	r2, [pc, #112]	@ (8002b68 <TIM_OC1_SetConfig+0xc8>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d10c      	bne.n	8002b16 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f023 0308 	bic.w	r3, r3, #8
 8002b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f023 0304 	bic.w	r3, r3, #4
 8002b14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a13      	ldr	r2, [pc, #76]	@ (8002b68 <TIM_OC1_SetConfig+0xc8>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d111      	bne.n	8002b42 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	621a      	str	r2, [r3, #32]
}
 8002b5c:	bf00      	nop
 8002b5e:	371c      	adds	r7, #28
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	40010000 	.word	0x40010000

08002b6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b087      	sub	sp, #28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	f023 0210 	bic.w	r2, r3, #16
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	021b      	lsls	r3, r3, #8
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f023 0320 	bic.w	r3, r3, #32
 8002bb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a1e      	ldr	r2, [pc, #120]	@ (8002c40 <TIM_OC2_SetConfig+0xd4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d10d      	bne.n	8002be8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	011b      	lsls	r3, r3, #4
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002be6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a15      	ldr	r2, [pc, #84]	@ (8002c40 <TIM_OC2_SetConfig+0xd4>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d113      	bne.n	8002c18 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002bf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	621a      	str	r2, [r3, #32]
}
 8002c32:	bf00      	nop
 8002c34:	371c      	adds	r7, #28
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40010000 	.word	0x40010000

08002c44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 0303 	bic.w	r3, r3, #3
 8002c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	021b      	lsls	r3, r3, #8
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002d14 <TIM_OC3_SetConfig+0xd0>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d10d      	bne.n	8002cbe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002ca8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	021b      	lsls	r3, r3, #8
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002cbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a14      	ldr	r2, [pc, #80]	@ (8002d14 <TIM_OC3_SetConfig+0xd0>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d113      	bne.n	8002cee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ccc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	011b      	lsls	r3, r3, #4
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	621a      	str	r2, [r3, #32]
}
 8002d08:	bf00      	nop
 8002d0a:	371c      	adds	r7, #28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	40010000 	.word	0x40010000

08002d18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	021b      	lsls	r3, r3, #8
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	031b      	lsls	r3, r3, #12
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a10      	ldr	r2, [pc, #64]	@ (8002db4 <TIM_OC4_SetConfig+0x9c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d109      	bne.n	8002d8c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	019b      	lsls	r3, r3, #6
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	621a      	str	r2, [r3, #32]
}
 8002da6:	bf00      	nop
 8002da8:	371c      	adds	r7, #28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40010000 	.word	0x40010000

08002db8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	f023 0201 	bic.w	r2, r3, #1
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002de2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f023 030a 	bic.w	r3, r3, #10
 8002df4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	621a      	str	r2, [r3, #32]
}
 8002e0a:	bf00      	nop
 8002e0c:	371c      	adds	r7, #28
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b087      	sub	sp, #28
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	f023 0210 	bic.w	r2, r3, #16
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	031b      	lsls	r3, r3, #12
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e52:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	621a      	str	r2, [r3, #32]
}
 8002e6a:	bf00      	nop
 8002e6c:	371c      	adds	r7, #28
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b085      	sub	sp, #20
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f043 0307 	orr.w	r3, r3, #7
 8002e98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	609a      	str	r2, [r3, #8]
}
 8002ea0:	bf00      	nop
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ec6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	021a      	lsls	r2, r3, #8
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	609a      	str	r2, [r3, #8]
}
 8002ee0:	bf00      	nop
 8002ee2:	371c      	adds	r7, #28
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b087      	sub	sp, #28
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	f003 031f 	and.w	r3, r3, #31
 8002efe:	2201      	movs	r2, #1
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6a1a      	ldr	r2, [r3, #32]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	401a      	ands	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a1a      	ldr	r2, [r3, #32]
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f003 031f 	and.w	r3, r3, #31
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	fa01 f303 	lsl.w	r3, r1, r3
 8002f24:	431a      	orrs	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	621a      	str	r2, [r3, #32]
}
 8002f2a:	bf00      	nop
 8002f2c:	371c      	adds	r7, #28
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
	...

08002f38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e050      	b.n	8002ff2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a1c      	ldr	r2, [pc, #112]	@ (8003000 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d018      	beq.n	8002fc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f9c:	d013      	beq.n	8002fc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a18      	ldr	r2, [pc, #96]	@ (8003004 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d00e      	beq.n	8002fc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a16      	ldr	r2, [pc, #88]	@ (8003008 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d009      	beq.n	8002fc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a15      	ldr	r2, [pc, #84]	@ (800300c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d004      	beq.n	8002fc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a13      	ldr	r2, [pc, #76]	@ (8003010 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d10c      	bne.n	8002fe0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40010000 	.word	0x40010000
 8003004:	40000400 	.word	0x40000400
 8003008:	40000800 	.word	0x40000800
 800300c:	40000c00 	.word	0x40000c00
 8003010:	40014000 	.word	0x40014000

08003014 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e042      	b.n	80030d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d106      	bne.n	8003068 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7fd ff7c 	bl	8000f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2224      	movs	r2, #36	@ 0x24
 800306c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800307e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f82b 	bl	80030dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	691a      	ldr	r2, [r3, #16]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003094:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695a      	ldr	r2, [r3, #20]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030e0:	b0c0      	sub	sp, #256	@ 0x100
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80030f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f8:	68d9      	ldr	r1, [r3, #12]
 80030fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	ea40 0301 	orr.w	r3, r0, r1
 8003104:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	431a      	orrs	r2, r3
 8003114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	431a      	orrs	r2, r3
 800311c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	4313      	orrs	r3, r2
 8003124:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003134:	f021 010c 	bic.w	r1, r1, #12
 8003138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003142:	430b      	orrs	r3, r1
 8003144:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003156:	6999      	ldr	r1, [r3, #24]
 8003158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	ea40 0301 	orr.w	r3, r0, r1
 8003162:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	4b8f      	ldr	r3, [pc, #572]	@ (80033a8 <UART_SetConfig+0x2cc>)
 800316c:	429a      	cmp	r2, r3
 800316e:	d005      	beq.n	800317c <UART_SetConfig+0xa0>
 8003170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	4b8d      	ldr	r3, [pc, #564]	@ (80033ac <UART_SetConfig+0x2d0>)
 8003178:	429a      	cmp	r2, r3
 800317a:	d104      	bne.n	8003186 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800317c:	f7fe ff44 	bl	8002008 <HAL_RCC_GetPCLK2Freq>
 8003180:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003184:	e003      	b.n	800318e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003186:	f7fe ff2b 	bl	8001fe0 <HAL_RCC_GetPCLK1Freq>
 800318a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800318e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003198:	f040 810c 	bne.w	80033b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800319c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031a0:	2200      	movs	r2, #0
 80031a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80031a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80031aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80031ae:	4622      	mov	r2, r4
 80031b0:	462b      	mov	r3, r5
 80031b2:	1891      	adds	r1, r2, r2
 80031b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80031b6:	415b      	adcs	r3, r3
 80031b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80031be:	4621      	mov	r1, r4
 80031c0:	eb12 0801 	adds.w	r8, r2, r1
 80031c4:	4629      	mov	r1, r5
 80031c6:	eb43 0901 	adc.w	r9, r3, r1
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031de:	4690      	mov	r8, r2
 80031e0:	4699      	mov	r9, r3
 80031e2:	4623      	mov	r3, r4
 80031e4:	eb18 0303 	adds.w	r3, r8, r3
 80031e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80031ec:	462b      	mov	r3, r5
 80031ee:	eb49 0303 	adc.w	r3, r9, r3
 80031f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80031f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003202:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003206:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800320a:	460b      	mov	r3, r1
 800320c:	18db      	adds	r3, r3, r3
 800320e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003210:	4613      	mov	r3, r2
 8003212:	eb42 0303 	adc.w	r3, r2, r3
 8003216:	657b      	str	r3, [r7, #84]	@ 0x54
 8003218:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800321c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003220:	f7fc ffd8 	bl	80001d4 <__aeabi_uldivmod>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	4b61      	ldr	r3, [pc, #388]	@ (80033b0 <UART_SetConfig+0x2d4>)
 800322a:	fba3 2302 	umull	r2, r3, r3, r2
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	011c      	lsls	r4, r3, #4
 8003232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003236:	2200      	movs	r2, #0
 8003238:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800323c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003240:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003244:	4642      	mov	r2, r8
 8003246:	464b      	mov	r3, r9
 8003248:	1891      	adds	r1, r2, r2
 800324a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800324c:	415b      	adcs	r3, r3
 800324e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003250:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003254:	4641      	mov	r1, r8
 8003256:	eb12 0a01 	adds.w	sl, r2, r1
 800325a:	4649      	mov	r1, r9
 800325c:	eb43 0b01 	adc.w	fp, r3, r1
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	f04f 0300 	mov.w	r3, #0
 8003268:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800326c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003270:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003274:	4692      	mov	sl, r2
 8003276:	469b      	mov	fp, r3
 8003278:	4643      	mov	r3, r8
 800327a:	eb1a 0303 	adds.w	r3, sl, r3
 800327e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003282:	464b      	mov	r3, r9
 8003284:	eb4b 0303 	adc.w	r3, fp, r3
 8003288:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800328c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003298:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800329c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80032a0:	460b      	mov	r3, r1
 80032a2:	18db      	adds	r3, r3, r3
 80032a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80032a6:	4613      	mov	r3, r2
 80032a8:	eb42 0303 	adc.w	r3, r2, r3
 80032ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80032ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80032b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80032b6:	f7fc ff8d 	bl	80001d4 <__aeabi_uldivmod>
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	4611      	mov	r1, r2
 80032c0:	4b3b      	ldr	r3, [pc, #236]	@ (80033b0 <UART_SetConfig+0x2d4>)
 80032c2:	fba3 2301 	umull	r2, r3, r3, r1
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	2264      	movs	r2, #100	@ 0x64
 80032ca:	fb02 f303 	mul.w	r3, r2, r3
 80032ce:	1acb      	subs	r3, r1, r3
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80032d6:	4b36      	ldr	r3, [pc, #216]	@ (80033b0 <UART_SetConfig+0x2d4>)
 80032d8:	fba3 2302 	umull	r2, r3, r3, r2
 80032dc:	095b      	lsrs	r3, r3, #5
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80032e4:	441c      	add	r4, r3
 80032e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032ea:	2200      	movs	r2, #0
 80032ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80032f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80032f8:	4642      	mov	r2, r8
 80032fa:	464b      	mov	r3, r9
 80032fc:	1891      	adds	r1, r2, r2
 80032fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003300:	415b      	adcs	r3, r3
 8003302:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003304:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003308:	4641      	mov	r1, r8
 800330a:	1851      	adds	r1, r2, r1
 800330c:	6339      	str	r1, [r7, #48]	@ 0x30
 800330e:	4649      	mov	r1, r9
 8003310:	414b      	adcs	r3, r1
 8003312:	637b      	str	r3, [r7, #52]	@ 0x34
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003320:	4659      	mov	r1, fp
 8003322:	00cb      	lsls	r3, r1, #3
 8003324:	4651      	mov	r1, sl
 8003326:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800332a:	4651      	mov	r1, sl
 800332c:	00ca      	lsls	r2, r1, #3
 800332e:	4610      	mov	r0, r2
 8003330:	4619      	mov	r1, r3
 8003332:	4603      	mov	r3, r0
 8003334:	4642      	mov	r2, r8
 8003336:	189b      	adds	r3, r3, r2
 8003338:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800333c:	464b      	mov	r3, r9
 800333e:	460a      	mov	r2, r1
 8003340:	eb42 0303 	adc.w	r3, r2, r3
 8003344:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003354:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003358:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800335c:	460b      	mov	r3, r1
 800335e:	18db      	adds	r3, r3, r3
 8003360:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003362:	4613      	mov	r3, r2
 8003364:	eb42 0303 	adc.w	r3, r2, r3
 8003368:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800336a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800336e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003372:	f7fc ff2f 	bl	80001d4 <__aeabi_uldivmod>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	4b0d      	ldr	r3, [pc, #52]	@ (80033b0 <UART_SetConfig+0x2d4>)
 800337c:	fba3 1302 	umull	r1, r3, r3, r2
 8003380:	095b      	lsrs	r3, r3, #5
 8003382:	2164      	movs	r1, #100	@ 0x64
 8003384:	fb01 f303 	mul.w	r3, r1, r3
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	3332      	adds	r3, #50	@ 0x32
 800338e:	4a08      	ldr	r2, [pc, #32]	@ (80033b0 <UART_SetConfig+0x2d4>)
 8003390:	fba2 2303 	umull	r2, r3, r2, r3
 8003394:	095b      	lsrs	r3, r3, #5
 8003396:	f003 0207 	and.w	r2, r3, #7
 800339a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4422      	add	r2, r4
 80033a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033a4:	e106      	b.n	80035b4 <UART_SetConfig+0x4d8>
 80033a6:	bf00      	nop
 80033a8:	40011000 	.word	0x40011000
 80033ac:	40011400 	.word	0x40011400
 80033b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033b8:	2200      	movs	r2, #0
 80033ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80033be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80033c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80033c6:	4642      	mov	r2, r8
 80033c8:	464b      	mov	r3, r9
 80033ca:	1891      	adds	r1, r2, r2
 80033cc:	6239      	str	r1, [r7, #32]
 80033ce:	415b      	adcs	r3, r3
 80033d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80033d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033d6:	4641      	mov	r1, r8
 80033d8:	1854      	adds	r4, r2, r1
 80033da:	4649      	mov	r1, r9
 80033dc:	eb43 0501 	adc.w	r5, r3, r1
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	00eb      	lsls	r3, r5, #3
 80033ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033ee:	00e2      	lsls	r2, r4, #3
 80033f0:	4614      	mov	r4, r2
 80033f2:	461d      	mov	r5, r3
 80033f4:	4643      	mov	r3, r8
 80033f6:	18e3      	adds	r3, r4, r3
 80033f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80033fc:	464b      	mov	r3, r9
 80033fe:	eb45 0303 	adc.w	r3, r5, r3
 8003402:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003412:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	f04f 0300 	mov.w	r3, #0
 800341e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003422:	4629      	mov	r1, r5
 8003424:	008b      	lsls	r3, r1, #2
 8003426:	4621      	mov	r1, r4
 8003428:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800342c:	4621      	mov	r1, r4
 800342e:	008a      	lsls	r2, r1, #2
 8003430:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003434:	f7fc fece 	bl	80001d4 <__aeabi_uldivmod>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4b60      	ldr	r3, [pc, #384]	@ (80035c0 <UART_SetConfig+0x4e4>)
 800343e:	fba3 2302 	umull	r2, r3, r3, r2
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	011c      	lsls	r4, r3, #4
 8003446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800344a:	2200      	movs	r2, #0
 800344c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003450:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003454:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003458:	4642      	mov	r2, r8
 800345a:	464b      	mov	r3, r9
 800345c:	1891      	adds	r1, r2, r2
 800345e:	61b9      	str	r1, [r7, #24]
 8003460:	415b      	adcs	r3, r3
 8003462:	61fb      	str	r3, [r7, #28]
 8003464:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003468:	4641      	mov	r1, r8
 800346a:	1851      	adds	r1, r2, r1
 800346c:	6139      	str	r1, [r7, #16]
 800346e:	4649      	mov	r1, r9
 8003470:	414b      	adcs	r3, r1
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003480:	4659      	mov	r1, fp
 8003482:	00cb      	lsls	r3, r1, #3
 8003484:	4651      	mov	r1, sl
 8003486:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800348a:	4651      	mov	r1, sl
 800348c:	00ca      	lsls	r2, r1, #3
 800348e:	4610      	mov	r0, r2
 8003490:	4619      	mov	r1, r3
 8003492:	4603      	mov	r3, r0
 8003494:	4642      	mov	r2, r8
 8003496:	189b      	adds	r3, r3, r2
 8003498:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800349c:	464b      	mov	r3, r9
 800349e:	460a      	mov	r2, r1
 80034a0:	eb42 0303 	adc.w	r3, r2, r3
 80034a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80034c0:	4649      	mov	r1, r9
 80034c2:	008b      	lsls	r3, r1, #2
 80034c4:	4641      	mov	r1, r8
 80034c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034ca:	4641      	mov	r1, r8
 80034cc:	008a      	lsls	r2, r1, #2
 80034ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80034d2:	f7fc fe7f 	bl	80001d4 <__aeabi_uldivmod>
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	4611      	mov	r1, r2
 80034dc:	4b38      	ldr	r3, [pc, #224]	@ (80035c0 <UART_SetConfig+0x4e4>)
 80034de:	fba3 2301 	umull	r2, r3, r3, r1
 80034e2:	095b      	lsrs	r3, r3, #5
 80034e4:	2264      	movs	r2, #100	@ 0x64
 80034e6:	fb02 f303 	mul.w	r3, r2, r3
 80034ea:	1acb      	subs	r3, r1, r3
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	3332      	adds	r3, #50	@ 0x32
 80034f0:	4a33      	ldr	r2, [pc, #204]	@ (80035c0 <UART_SetConfig+0x4e4>)
 80034f2:	fba2 2303 	umull	r2, r3, r2, r3
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034fc:	441c      	add	r4, r3
 80034fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003502:	2200      	movs	r2, #0
 8003504:	673b      	str	r3, [r7, #112]	@ 0x70
 8003506:	677a      	str	r2, [r7, #116]	@ 0x74
 8003508:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800350c:	4642      	mov	r2, r8
 800350e:	464b      	mov	r3, r9
 8003510:	1891      	adds	r1, r2, r2
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	415b      	adcs	r3, r3
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800351c:	4641      	mov	r1, r8
 800351e:	1851      	adds	r1, r2, r1
 8003520:	6039      	str	r1, [r7, #0]
 8003522:	4649      	mov	r1, r9
 8003524:	414b      	adcs	r3, r1
 8003526:	607b      	str	r3, [r7, #4]
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003534:	4659      	mov	r1, fp
 8003536:	00cb      	lsls	r3, r1, #3
 8003538:	4651      	mov	r1, sl
 800353a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800353e:	4651      	mov	r1, sl
 8003540:	00ca      	lsls	r2, r1, #3
 8003542:	4610      	mov	r0, r2
 8003544:	4619      	mov	r1, r3
 8003546:	4603      	mov	r3, r0
 8003548:	4642      	mov	r2, r8
 800354a:	189b      	adds	r3, r3, r2
 800354c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800354e:	464b      	mov	r3, r9
 8003550:	460a      	mov	r2, r1
 8003552:	eb42 0303 	adc.w	r3, r2, r3
 8003556:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	663b      	str	r3, [r7, #96]	@ 0x60
 8003562:	667a      	str	r2, [r7, #100]	@ 0x64
 8003564:	f04f 0200 	mov.w	r2, #0
 8003568:	f04f 0300 	mov.w	r3, #0
 800356c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003570:	4649      	mov	r1, r9
 8003572:	008b      	lsls	r3, r1, #2
 8003574:	4641      	mov	r1, r8
 8003576:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800357a:	4641      	mov	r1, r8
 800357c:	008a      	lsls	r2, r1, #2
 800357e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003582:	f7fc fe27 	bl	80001d4 <__aeabi_uldivmod>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4b0d      	ldr	r3, [pc, #52]	@ (80035c0 <UART_SetConfig+0x4e4>)
 800358c:	fba3 1302 	umull	r1, r3, r3, r2
 8003590:	095b      	lsrs	r3, r3, #5
 8003592:	2164      	movs	r1, #100	@ 0x64
 8003594:	fb01 f303 	mul.w	r3, r1, r3
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	3332      	adds	r3, #50	@ 0x32
 800359e:	4a08      	ldr	r2, [pc, #32]	@ (80035c0 <UART_SetConfig+0x4e4>)
 80035a0:	fba2 2303 	umull	r2, r3, r2, r3
 80035a4:	095b      	lsrs	r3, r3, #5
 80035a6:	f003 020f 	and.w	r2, r3, #15
 80035aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4422      	add	r2, r4
 80035b2:	609a      	str	r2, [r3, #8]
}
 80035b4:	bf00      	nop
 80035b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80035ba:	46bd      	mov	sp, r7
 80035bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035c0:	51eb851f 	.word	0x51eb851f

080035c4 <memset>:
 80035c4:	4402      	add	r2, r0
 80035c6:	4603      	mov	r3, r0
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d100      	bne.n	80035ce <memset+0xa>
 80035cc:	4770      	bx	lr
 80035ce:	f803 1b01 	strb.w	r1, [r3], #1
 80035d2:	e7f9      	b.n	80035c8 <memset+0x4>

080035d4 <__libc_init_array>:
 80035d4:	b570      	push	{r4, r5, r6, lr}
 80035d6:	4d0d      	ldr	r5, [pc, #52]	@ (800360c <__libc_init_array+0x38>)
 80035d8:	4c0d      	ldr	r4, [pc, #52]	@ (8003610 <__libc_init_array+0x3c>)
 80035da:	1b64      	subs	r4, r4, r5
 80035dc:	10a4      	asrs	r4, r4, #2
 80035de:	2600      	movs	r6, #0
 80035e0:	42a6      	cmp	r6, r4
 80035e2:	d109      	bne.n	80035f8 <__libc_init_array+0x24>
 80035e4:	4d0b      	ldr	r5, [pc, #44]	@ (8003614 <__libc_init_array+0x40>)
 80035e6:	4c0c      	ldr	r4, [pc, #48]	@ (8003618 <__libc_init_array+0x44>)
 80035e8:	f000 f818 	bl	800361c <_init>
 80035ec:	1b64      	subs	r4, r4, r5
 80035ee:	10a4      	asrs	r4, r4, #2
 80035f0:	2600      	movs	r6, #0
 80035f2:	42a6      	cmp	r6, r4
 80035f4:	d105      	bne.n	8003602 <__libc_init_array+0x2e>
 80035f6:	bd70      	pop	{r4, r5, r6, pc}
 80035f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80035fc:	4798      	blx	r3
 80035fe:	3601      	adds	r6, #1
 8003600:	e7ee      	b.n	80035e0 <__libc_init_array+0xc>
 8003602:	f855 3b04 	ldr.w	r3, [r5], #4
 8003606:	4798      	blx	r3
 8003608:	3601      	adds	r6, #1
 800360a:	e7f2      	b.n	80035f2 <__libc_init_array+0x1e>
 800360c:	08003654 	.word	0x08003654
 8003610:	08003654 	.word	0x08003654
 8003614:	08003654 	.word	0x08003654
 8003618:	08003658 	.word	0x08003658

0800361c <_init>:
 800361c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800361e:	bf00      	nop
 8003620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003622:	bc08      	pop	{r3}
 8003624:	469e      	mov	lr, r3
 8003626:	4770      	bx	lr

08003628 <_fini>:
 8003628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800362a:	bf00      	nop
 800362c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800362e:	bc08      	pop	{r3}
 8003630:	469e      	mov	lr, r3
 8003632:	4770      	bx	lr
